--- Log opened Tue Nov 26 00:00:27 2013
01:28 < kermitt:#liferay> .
04:44 < hufg:#liferay> kermitt: see marketplace
04:59 < Tar-Minyatur:#liferay> Good morning.
05:00 < Tar-Minyatur:#liferay> Do you guys know what Liferay does when you provide all the JDBC connection settings instead of a JDBC pool name?
05:00 < Tar-Minyatur:#liferay> Does Liferay create it's own connection pool?
05:00 < Tar-Minyatur:#liferay> Because it looks like our Liferay opens way too many connections to the DB.
05:12 < hufg:#liferay> goood morning
05:35 < Tar-Minyatur:#liferay> Never mind. I found it.
06:27 < hufg:#liferay> i have a wicked problem with load balancer in front all redirects "fail" in liferay, 302 just doesn't happen and this affects the usability of the admin ui
06:27 < hufg:#liferay> seems pretty far fetched that liferay has this kind of a bug
06:29 < hufg:#liferay> essentially it's implying the host from request has some effect on liferay behavious
06:29 < hufg:#liferay> behaviour
06:29 < hufg:#liferay> doubt it :Z
06:43 < hufg:#liferay> i take that back
06:43 < hufg:#liferay> :D
06:55 < hufg:#liferay> there are some lfieray security settings in play here
06:59 < hufg:#liferay> no bug, feature!
07:45 < jardineworks:#liferay> hufg, Tar-Minyatur -- have you guys encountered the bug where portlets in a custom them execute their render method multtiple times on one load?
07:45 < hufg:#liferay> no
07:46 < jardineworks:#liferay> I suppose it would depend how many, if any, logging statements you have in your render method :)
07:46 < jardineworks:#liferay> I have a custom carousel portlet that loads 5 times!
07:47 < jardineworks:#liferay> https://issues.liferay.com/browse/LPS-40984
07:47 < jardineworks:#liferay> its listed as a minor big, but I would call it a little more severe than minor.
07:58 < hufg:#liferay> hmm portlets in a custom theme
07:58 < hufg:#liferay> you mean a portlet instantied in theme
07:59 < hufg:#liferay> that is very strange
07:59 < hufg:#liferay> we don't have a logging policy that would catch this
08:01 < hufg:#liferay> doesn't seem too legit
08:01 < hufg:#liferay> you can see sass failures in the linked forum post
08:04 < hufg:#liferay> anything is possible though but the correlation of custom theme and "duplicate" render request calls is a bit far fetched imho
08:05 < hufg:#liferay> have you tried using the classic theme?
08:07 < hufg:#liferay> i'm not saying you don't have problems just that the issue is very weak and lacks any insight, same for the forum post
08:32 < gruntz:#liferay> Hi. There's a bunch of tutorials how to setup liferay's tomcat with oracle xe database, but merely none which metions how to do this with liferay+jboss7 bundle, any useful links or hints will be very much appreciated!
08:48 < hufg:#liferay> doesn't the user guide have instructions for every applicatio nserver
08:48 < hufg:#liferay> then you have to figure out how to create jdbc resources for oracle in jboss7
08:54 < hufg:#liferay> with jboss7+bundle your only trouble is to configure jdbc resources
08:54 < Tar-Minyatur:#liferay> Mhm. Does anyone know what Liferay uses to build portlet.css?
08:54 < hufg:#liferay> without looking i'm saying sass
08:54 < hufg:#liferay> or what do you mean?
08:54 < Tar-Minyatur:#liferay> Yes. I guess so.
08:54 < Tar-Minyatur:#liferay> But where is the original.
08:55 < Tar-Minyatur:#liferay> There are loads of definitions in there, which I can't find anywhere.
08:55 < hufg:#liferay> the styled theme is the original
08:55 < Tar-Minyatur:#liferay> And the portlet.css only appears in the target/ folder.
08:55 < hufg:#liferay> at least in 6.1 there are three themes, styled, unstyled and classic
08:55 < hufg:#liferay> styled has admin ui styles predefined, unstyled has nothing(LOL) and classic is the showcase
08:55 < hufg:#liferay> so you derive your theme from unstyled which has the portlet.css
08:56 < Tar-Minyatur:#liferay> So I should be able to override some if the stuff and SASS will merge it with the original file from the classic theme?
08:56 < hufg:#liferay> then because maven plugin is so shitty you let DynamicCssFilter compile it to sass at runtime
08:56 < Tar-Minyatur:#liferay> *of
08:56 < hufg:#liferay> yes and how this happens totally depends on your theme b uild
08:56 < Tar-Minyatur:#liferay>  Mhm. My maven build seems to generate the portlet.css...
08:57 < hufg:#liferay> yes but it's still shitty, don't argue with me man!
08:57 < hufg:#liferay> 8)
08:57 < hufg:#liferay> you can't precompile sass with maven theme plugin 6.1.1
08:57 < hufg:#liferay> which means you either create your own compile and stab it into the heart of liferay maven theme plugin or let DynamicCssFilter do it's business
08:58 < hufg:#liferay> anyways just copy portlet.css to the same path, my understanding is that this will override the original
09:01 < gruntz:#liferay> hufg: thanks for help.
09:02 < hufg:#liferay> hmm /css/portlet.css
09:02 < hufg:#liferay> is the path
09:02 < hufg:#liferay> copy paste from original source, modify and hope the maven plugin compiles your sass and you are done
09:02 < hufg:#liferay> oh no scratch that i already forgot about dynamiccssfilter
09:02 < hufg:#liferay> no compiling
09:03 < Tar-Minyatur:#liferay> Ok. I'll try that. Thanks.
09:05 < hufg:#liferay> Tar-Minyatur: the maven plugin "overlays" the parent theme into your theme and keeps your files that are overlapping
09:05 < hufg:#liferay> or thats how it's supposed to work
09:06 < jardineworks:#liferay> hufg, I haven't actually dug into it yet to be honest ... I was just curious if anyone else has seen it too. Next week I am hoping to get to it.
09:06 < hufg:#liferay> hehe yeah
09:06 < jardineworks:#liferay> I'll let  you know if I find anything out
09:06 < jardineworks:#liferay> for now, the site still responds fast enough.
09:06 < hufg:#liferay> someone bought us shitty machines
09:07 < hufg:#liferay> no speed for me
09:07 < hufg:#liferay> !!
09:07 < jardineworks:#liferay> and it's not consistent as an issue which is very disconcerting. I mean the carousel portlet nearly always does it, but there are instances where it does not. And then I have some other portlets that never do it at all.
09:07 < hufg:#liferay> some indians moving them transistors
09:07 < hufg:#liferay> mm yes that is strange
09:08 < Tar-Minyatur:#liferay> Which theme does the Maven build use as parent?
09:09 < Tar-Minyatur:#liferay> I can't find a setting for it.
09:09 < hufg:#liferay> Tar-Minyatur: it's defined in build properties
09:09 < jardineworks:#liferay> hufg, the only immediate differnce I can see is that the portlets that are repeating themselves are pulling content from the cache.
09:09 < Tar-Minyatur:#liferay> I only have a pom.xml in there.
09:09 < hufg:#liferay> are you using liferays maven theme plugin
09:09 < hufg:#liferay> jardineworks: ok
09:10 < Tar-Minyatur:#liferay> The pom.xml uses liferay-maven-plugin to execute theme-merge, build-css and build-thumbnail.
09:10 < Tar-Minyatur:#liferay> But I can't find any setting that specifies which themes to merge.
09:11 < hufg:#liferay> <parentTheme></parentTheme>
09:11 < hufg:#liferay> you may have a version that has it hardcoded
09:11 < hufg:#liferay> in liferay-maven-plugin configuration
09:11 < hufg:#liferay> parentTheme property
09:13 < Tar-Minyatur:#liferay> <parentTheme>${liferay.theme.parent}</parentTheme>
09:13 < Tar-Minyatur:#liferay> Ah!
09:13 < Tar-Minyatur:#liferay> Getting closer.
09:13 < Tar-Minyatur:#liferay> This is specified in the parent maven project of our actual theme project.
09:14 < Tar-Minyatur:#liferay> Ah. Found it. Our theme is built on top of _styled.
09:15 < hufg:#liferay> yeah
09:17 < Tar-Minyatur:#liferay> Thanks!
09:17 < hufg:#liferay> np np
09:17 < Tar-Minyatur:#liferay> The whole theme idea sounds like a well thought-out concept to me.
09:17 < jardineworks:#liferay> hufg, when is your go live again?
09:18 < Tar-Minyatur:#liferay> Too bad they totally disregarded that in our project...
09:21 < hufg:#liferay> Tar-Minyatur: yes it's pretty impressive
09:41 < Tar-Minyatur:#liferay> Is override.css something that Liferay suggests for themes to use or did the idiots who did ours invent this?
09:41 < hufg:#liferay> no idea
09:41 < Tar-Minyatur:#liferay> (There are loads of directives with !important in there, so I guess it's just a quick and dirty approach again.)
09:42 < hufg:#liferay> 8)
09:44 < hufg:#liferay> Tar-Minyatur rotty3000 jardineworks if you ever have extra 18k euros to throw around and are interested in a constructive research topic regarding j2ee/liferay give me a call!
09:44 < hufg:#liferay> i haven't done my masters thesis yet 8)
09:45 < hufg:#liferay> constructive means it would involve coding hehe
09:50 < jardineworks:#liferay> hufg, you should pitch Brian Chan ... or someone at Liferay. Might be good PR for them -- as long as your findings are positive :)
09:51 < hufg:#liferay> 8)
09:52 < jardineworks:#liferay> hufg, do you use eclipse?
09:52 < hufg:#liferay> yes
09:53 < jardineworks:#liferay> hufg, do you know how to avoid eclipse stopping on the ThreadPoolExecutor breakpoint when in debug mode all the time? its so annoying.
09:53 < hufg:#liferay> hmm
09:53 < hufg:#liferay> whats that?
09:54 < hufg:#liferay> never encountered this problem
09:54 < hufg:#liferay> http://stackoverflow.com/questions/6290470/eclipse-debugger-always-blocks-on-threadpoolexecutor-without-any-obvious-excepti
09:55 < hufg:#liferay> no issues what so ever debugging liferay
09:55 < hufg:#liferay> liferay running on glassfish
09:56 < jardineworks:#liferay> its not an issue so much as an annoyance.
09:56 < hufg:#liferay> ok
09:56 < jardineworks:#liferay> I do most of my dev in debug mode so that I can step through it while I am working.. but when the threads finish the debugger alerts me (and I don't give a shit)
09:57 < jardineworks:#liferay> just wondering is there is a way to disable that particular alert that you know of.
09:57 < jardineworks:#liferay> I have added filters at both the package and the class level...
09:57 < jardineworks:#liferay> I have put an explicit breakpoint and disabled it...
09:57 < jardineworks:#liferay> but nothing seems to be happy
09:58 < jardineworks:#liferay> happy meaning work. It's fine, I'm the one that is grumpy :)
09:58 < hufg:#liferay> hehe
09:59 < hufg:#liferay> no idea :/
10:00 < jardineworks:#liferay> \o/
10:00 < jardineworks:#liferay> http://codesstore.blogspot.ca/2013/02/remove-threadpoolexecutor-break-point.html
10:00 < jardineworks:#liferay> the world before the internet must have been a really frustrating place.
10:01 < hufg:#liferay> 8)
11:16 < jardineworks:#liferay> can someone tell me what the proper way to reference an image (from the theme) in basic webcontent is?
11:17 < jardineworks:#liferay> using /[themename war folder/image/... can't be the right way. If someone changes the theme all the references break
11:38 < topolik:#liferay> jardineworks: themeDisplay.getPathImage() should be what you look for
11:58 < jardineworks:#liferay> topolik, in a scriptlet right?
11:58 < jardineworks:#liferay> that works for a jsp, but I cant use that in a piece of web content
11:59 < topolik:#liferay> ah, from web content
11:59 < jardineworks:#liferay> it actually prints out the themeDisplay.getPathThemeIamges()
11:59 < topolik:#liferay> if you were in a web content template, it would work
11:59 < jardineworks:#liferay> sure...
11:59 < topolik:#liferay> uhm, it's not very clean way, but you could use javascript
12:00 < jardineworks:#liferay> I could do that I suppose .. but seems silly to create an entire template for that
12:00 < jardineworks:#liferay> ew
12:00 < jardineworks:#liferay> :)
12:00 < topolik:#liferay> :)
12:00 < jardineworks:#liferay> I think I will just use a template.
12:00 < jardineworks:#liferay> no worries
12:00 < topolik:#liferay> or
12:00 < topolik:#liferay> you can use some placeholder
12:00 < topolik:#liferay> that you reference from the theme
12:00 < topolik:#liferay> like
12:01 < topolik:#liferay> asdf <span class="myIcon" /> xxx
12:01 < topolik:#liferay> and in the theme's CSS have sth like this:
12:02 < topolik:#liferay> .myIcon {background-image: url('...'); display: block; width: XXpx; height: YYpx;...}
12:04 < jardineworks:#liferay> that is some kid of magic that is beyond my front end science
12:04 < jardineworks:#liferay> :)
12:04 < jardineworks:#liferay> topolik, separate question though. I have a custom authenticator. After the user logs in I want to redirect them to where they were before they signed in (like LR does by default)
12:05 < jardineworks:#liferay> My authentication flow might in some cases go through several steps though.
12:05 < jardineworks:#liferay> I know there is a saveLastPath value... does 0 mean DON'T ... as in don't overwrite what is there?
12:31 < topolik:#liferay> jardineworks: let me see
12:34 < topolik:#liferay> ok
12:34 < topolik:#liferay> saveLastPath is true by default
12:34 < topolik:#liferay> that means
12:35 < topolik:#liferay> when you request a page, portal stores current URL into LAST_PATH request attribute and then into session
12:36 < jardineworks:#liferay> ok -- so if I set LAST_PATH to 0 in a call, does that mean, don't save the current url?
12:36 < topolik:#liferay> you need to set "saveLastPath=0" in a request parameter!
12:36 < jardineworks:#liferay> ok .. I do that
12:36 < topolik:#liferay> then, this URL won't overwrite the last path
12:36 < jardineworks:#liferay> soooo
12:37 < jardineworks:#liferay> If I am on an order page for example.
12:37 < jardineworks:#liferay> and I don't set the value ... it will save that location
12:37 < jardineworks:#liferay> and then as I step through the other pages I set saveLastPath, 0 ... then the last path will continue to store my order page
12:37 < jardineworks:#liferay> right?
12:37 < topolik:#liferay> yes,
12:37 < topolik:#liferay> I believe
12:37 < jardineworks:#liferay> good cover ;)
12:38 < topolik:#liferay> but
12:38 < jardineworks:#liferay> and then at the end I just say if there is a last path in the session, send the user there?
12:38 < topolik:#liferay> there is one thing I need to check
12:38 < topolik:#liferay> ah, yes
12:38 < topolik:#liferay> it should be in the session even after log in
12:39 < jardineworks:#liferay> so session.getAttribute("LAST_PATH"); will give me a url I can forward the user to?
12:40 < jardineworks:#liferay> or is there a way that post login, lr will do that for me? isn;t there a property for this?
12:40 < jardineworks:#liferay> I feel like I have seen one before.
12:51 < topolik:#liferay> yes
12:51 < topolik:#liferay> it works OOTB
12:51 < topolik:#liferay> but under some conditions
12:52 < topolik:#liferay> https://github.com/liferay/liferay-portal/blob/6.1.2-ga3/portal-impl/src/com/liferay/portal/struts/PortalRequestProcessor.java#L162,L163
12:52 < topolik:#liferay> this means, you need to redirect to MainServlet after log in, but should not specify any struts action/mapping
12:53 < topolik:#liferay> i.e. go to "/c"
13:00 < jardineworks:#liferay> hmmm
13:01 < jardineworks:#liferay> topolik, so if I have a custom authenticator that returns TRUE (assumign the user passed the checks), how do I do it? specify a redirect parameter in the inital call of "/c"?
13:03 < jardineworks:#liferay> topolik, hmmm.. but I need to make sure that the default landing page attribute is not set then right?
13:20 < jardineworks:#liferay> topolik, got it! including the oauth and rest login actions :)
13:20 < jardineworks:#liferay> thank you!
13:29 < Nudge:#liferay> Good evening to everybody
13:30 < Nudge:#liferay> I am new to liferay and looking for strategic recommendations
13:31 < jardineworks:#liferay> fire away!
13:31 < Nudge:#liferay> especially I want to find out how to design my data storage best
13:32 < Nudge:#liferay> I want to create some services and data entries that could be used throughout a portal
13:32 < Nudge:#liferay> there is the feature of dynamic data lists
13:32 < Nudge:#liferay> and there is also the possibility to encapsulate data within a portlet
13:32 < jardineworks:#liferay> Nudge -- you may also be interested in Service Builder.
13:33 < Nudge:#liferay> yes, you say it
13:33 < Nudge:#liferay> is there any long-term recommendation where to put what kind of data?
13:34 < jardineworks:#liferay> Nudge, I'm not sure how to answer that. I mean, I suppose it depends on the data .. and how you use it, how you need it to be accessed (outside the portal maybe?)
13:34 < Nudge:#liferay> let's say I have some user-related data like his/her interests in some of the topics the website offers.
13:35 < jardineworks:#liferay> how big is the list?
13:35 < jardineworks:#liferay> like a dozen fields? or hundreds?
13:35 < Nudge:#liferay> lets start with something simple, perhaps 10 interests out of 20
13:35 < Nudge:#liferay> the user can multi-select them on registering
13:36 < jardineworks:#liferay> if you have a manageable size then what I have done in the past, for this exact example, is use the Expando attribtues on the User Model object that comes in Liferay
13:36 < Nudge:#liferay> does that mean "dynamic" fields to the user entity?
13:40 < Nudge:#liferay> Later I would like to expand this simple thing for example so that access to documents and web pages is restricted to those that belong to an interest.
13:41 < Nudge:#liferay> So there will be some kind of foreign keys involved.
13:42 < Nudge:#liferay> Of course I would like to keep my structure clean, encapsulating services into separate portlets that can be hot-deployed independently, but on the other hand, the data should be usable in any part of the website.
13:43 < Nudge:#liferay> I am unsure how to achieve this with liferay.
13:45 < Nudge:#liferay> I want to find out if I could access a portlet's data from any vm template or if I could access data from a dynamic data list from a portlet and so on.
13:46 < jardineworks:#liferay> Nudge, well, here is what I am hearing.
13:46 < jardineworks:#liferay> 1. a user signs up and as part of their signup they pick stuff they like.
13:46 < jardineworks:#liferay> 2. you create the user
13:46 < jardineworks:#liferay> 3. as part of the user creation you set the expando properties to values based on their selection.
13:46 < jardineworks:#liferay> 4. The user logs in
13:47 < jardineworks:#liferay> 5. You can access (in code) the users expando settings to determine which ones they selected.
13:47 < jardineworks:#liferay> 6. you create a custom portlet, grab the user out of the ThemeDisplay, check the expandos and then use your own branch logic to determine wat they should see..
13:47 < jardineworks:#liferay> pages, files, links. whatever.
13:49 < Nudge:#liferay> This way, would it be possible to let an editor maintain the possible values?
13:50 < jardineworks:#liferay> everything is based on ACLs. YOu can set the attributes so that a particular role can manage them, and you can set it so that a user can manage their own
13:50 < jardineworks:#liferay> totally up to you
13:51 < Nudge:#liferay> that sound great
13:51 < Nudge:#liferay> but it's hard for me to imagine how this is working out (technically)
13:51 < jardineworks:#liferay> hire soemone who knows Liferay to show you :)
13:52 < Nudge:#liferay> well, that of course would be a good option to speed it up
13:53 < jardineworks:#liferay> liferay is awesome, but like any EE piece of software its a beast.
13:53 < jardineworks:#liferay> you can get it up and running faster than any of its competitors.... but that just marches you towards confusion faster :)
13:54 < jardineworks:#liferay> but once you know how to use it, its AWESOME.
13:54 < Nudge:#liferay> as a developer I like trying to find out how things work myself, though
13:54 < jardineworks:#liferay> (disclaimer: I use it as one of three disciplines and I am an unofficial evangelist)
13:54 < jardineworks:#liferay> have you done portal development before?
13:54 < Nudge:#liferay> not with portlets, no
13:55 < jardineworks:#liferay> it'll be a bit of a hill.
13:55 < Nudge:#liferay> I have a strong background in PHP, some ZF2, some wordpress, some magento,
13:55 < jardineworks:#liferay> but if you are a java guy, and you understand j2ee, then you'll get there.
13:55 < jardineworks:#liferay> ew
13:55 < jardineworks:#liferay> PHP and Java are not the same boss
13:56 < Nudge:#liferay> I am working right now a lot with JEE and know java from foreign jobs
13:56 < jardineworks:#liferay> well, that
13:56 < jardineworks:#liferay> will help you a lot more than php will
13:56 < Nudge:#liferay> :-) yes
13:57 < Nudge:#liferay> my first liferay experience was the standard theme homepage, telling me nothing
13:57 < jardineworks:#liferay> its a good tiem to join... there is a lot of material and turorial type posts out there now. A few years ago there was a lot more head bashing
13:57 < Nudge:#liferay> I started with the "liferay in action" book. Now I have at least a made a theme portlet that's working fine and a first data portlet
13:58 < Nudge:#liferay> I don't worry about my skills to develop the stuff
13:59 < Nudge:#liferay> I am worrying rather on how to avoid some pitfalls. We have a very big CMS that is working fine but is weak at dynamic, user-generated content. So we would like to shift parts of the website to a portal like liferay, e.g. blog functionality.
14:01 < jardineworks:#liferay> well, best of luck. This channel is pretty good.. you just need to be patient. People are not always around to answer.
14:01 < Nudge:#liferay> BTW, where is this channel "hosted", timezone-wise? I am from Germany
14:02 < jardineworks:#liferay> no idea.
14:02 < jardineworks:#liferay> but there are people from all over in here.
14:03 < jardineworks:#liferay> I am in EST as are a few others.
14:03 < jardineworks:#liferay> but there is a guy from Finland and Tar-Minyatur is in Germany
14:03 < jardineworks:#liferay> so you are not alone
14:03 < jardineworks:#liferay> ;)
14:04 < Nudge:#liferay> jardineworks: Maybe you can help me with one very important question to me: Is it possible to have a data list somewhere (portlet, dynamic data list, wherever) and use the data entry's fields to feed a content template, so that each generates a page on its own? In our current CMS this feature is called content projection templates.
14:06 < Nudge:#liferay> e.g. you have a list of events with title, location, date, time and description. And then for each entry there will be page with a template using those values.
14:08 < jardineworks:#liferay> Nudge, you create a structure for each of your content types, and then you can create 0 - n templates for that type. When you add the content to a page you pick the content and the template to use. So a single event can use the same data but present itself differently depending on where you are on the site
14:09 < Nudge:#liferay> Is it possible to let liferay generate the pages automatically?
14:10 < jardineworks:#liferay> yes
14:10 < jardineworks:#liferay> a page in liferay is referred to as a layout.
14:10 < jardineworks:#liferay> which is essentially a virtual url that has a page layout assigned to it
14:11 < jardineworks:#liferay> you then drop your portlets into the layout
14:11 < jardineworks:#liferay> the logic of your portlets will determine what shows.
14:12 < Nudge:#liferay> Currently I don't understand much of your answer but I am happy that at least there is a way. One day I guess this sounds simple to me. :)
14:13 < Nudge:#liferay> Where would you put such data best? Into a portlet (with a model and service) or would you use a DDL schema here?
14:16 < Nudge:#liferay> Ah, does that mean I would create a layout with an dynamic url such as /<interest-name>/events/<id> and drop my portlet into that? Then the portlet examines the url pattern, extracts parameters from it and renders a corresponding entry's data?
14:17 < jardineworks:#liferay> Nudge, that question doesn't really make sense :). You don't put data in a portlet really. You use a portlet to access the data. Best thing you can do is read the ServiceBuilder chapter in Liferay in Action. Chapter 3 I think it was
14:17 < jardineworks:#liferay> that will help you understand the pattern that Liferay uses.
14:17 < Nudge:#liferay> I did, indeed.
14:19 < jardineworks:#liferay> well in there, if you do the examples you will see that the data gets pushed into the database in custom tables right? and then you use the XXXLocalServiceUtils to retrieve it. So if that servicebuilder jar is only in your one Portet then the utility class will only be accessible by that portlet. If you need it to be accessible by multiple portlets then you need to promote it to a global scope (TOMCAT_HOME/lib/ext) so that all of the portlet, hoo
14:19 < jardineworks:#liferay> ks whatever can reference it
14:19 < jardineworks:#liferay> that is one way to do it
14:20 < jardineworks:#liferay> cotnent is native to the portal so there are already dozens of utility classes in place as part of the core api that you can use to retrieve content.
14:22 < Nudge:#liferay> yes
14:23 < Nudge:#liferay> I think I understand the local mechanics of the service builder inside one portlet.
14:24 < Nudge:#liferay> When it comes to the access from outside of the portlet, I am struggling a bit.
14:25 < Nudge:#liferay> That's why I want to find out what data can be accessed from where.
14:25 < Nudge:#liferay> Or maybe this is just a confusion and the restriction I think of does not apply at all.
14:26 < Nudge:#liferay> So, a total newbie question first: There are these template languages in Liferay, VM, Freemarker and so on.
14:27 < jardineworks:#liferay> Nudge, if you enable remote interfaces, then all of your service builder stuff can be accessed via SOAP, REST or JSON services.
14:28 < Nudge:#liferay> jardineworks: Thanks for the hint, I will keep that in mind for later.
14:29 < Nudge:#liferay> At first I would like to dissolve my confusion about the "local" re-use of stored db data.
14:30 < Nudge:#liferay> So, is it possible to write VM templates outside a portlet? I guess, yes.
14:55 <@jhf:#liferay> Nudge: scripting languages like velocity and freemarker are used in several places. mainly as a templating language for rendering web content, or used as a templating language for a site's theme (skin).
14:58 <@jhf:#liferay> but it's safe to say that anywhere you can write template code, that code will have access to any underlying data from the database using the built-in objects made available to the context in which the script is evaluated.
15:02 <@jhf:#liferay> so whether it's "inside a portlet" or not doesn't matter much. the only difference is the context in which it is evaluated. for example, if you are writing template code for a theme you'll have access to the servlet request/response object pair, as your template code is evaluated as part of a complete portal page request. if you're writing template code for rendering a single piece of web content, then you'll not have the same context, as it's evaluated only i
15:02 <@jhf:#liferay> the context of that one web content piece (so for example you don't have access to the request/response objects, and a few other bits)
15:03 < Nudge:#liferay> jhf: Thank you
15:04 <@jhf:#liferay> yw! and welcome, we're here to help! and to confuse, occasionally
15:04 <@jhf:#liferay> ;-)
15:04 < Nudge:#liferay> If I had a small vm template for web content in the footer and would like to include something from my portlet's db data, how would I do that?
15:05 <@jhf:#liferay> searching for a good example..
15:06 < Nudge:#liferay> Do I always need to restart the liferay server so that my new service jar is reloaded? Or is there a general entity service service within liferay?
15:06 < Nudge:#liferay> Okay, let me construct some weird example ... :-)
15:08 < Nudge:#liferay> The user registered and selected some of his favourite interests.
15:10 < Nudge:#liferay> An editor creates some news or events that relate to this interests and wants to display this new information to each user in the footer, for example "Upcoming event for <interest-name>: On March 14th, 2014: Get-together in Paris".
15:11 < Nudge:#liferay> So the editor wants (either manually or automatically) use some db data (here: event table entry) to be displayed inside a web content display.
15:14 <@jhf:#liferay> yeah.. so there are many ways to skin that cat :)
15:14 < Nudge:#liferay> I guess if an editor came to me, I would start developing a portlet that allows him to input event data to a table, like the product example from the liferay-in-action.
15:15 <@jhf:#liferay> one way is during registration (I think jardineworks suggested this) is that the "interests" are stored in an Expando data table, and then in your footer or web content template, look at the expando value and show the news items that match the value.
15:15 < Nudge:#liferay> But if he/she would then ask me "And how can I use my events now in my pages" I would be lost.
15:15 <@jhf:#liferay> BUT then you also have to code the "editor" application
15:16 <@jhf:#liferay> Liferay has many built-in apps, one of which is the "Announcements" portlet which does exactly this.
15:16 < jardineworks:#liferay> jhf easy peasy with the taglibs!
15:16 < jardineworks:#liferay> there is a liferay ui taglib to render the expandos no?
15:16 <@jhf:#liferay> yes, there is, but in this case Nudge wants to render the news items related to those expando values, not the expando values themselves
15:18 < jardineworks:#liferay> jhf, no no.. I meant for the "editor" application where someone could change them
15:19 <@jhf:#liferay> yeah if you coded your own editor application, it could basically be an editor for the expando table, allowing an admin to change the values that the user originally selected during registration
15:22 <@jhf:#liferay> I just don't think you need to code any custom editor application or deal with expando API at all unless you really want to.
15:22 <@jhf:#liferay> for example
15:22 <@jhf:#liferay> there is a feature in "Asset Publisher" that will display web content articles that match a pre-defined custom user attribute (which underneath uses expando)
15:23 <@jhf:#liferay> so when a user signs up, they enter their interests, and this is stored as an expando "custom user attribute". then on any page, you can stick an asset publisher, and create web content articles categorized using the pre-defined set of interests.
15:23 < Nudge:#liferay> I guess I need more time intimidating with all the functionality that already exists
15:23 <@jhf:#liferay> if a user visits that page, they will only see news articles that "match" their interests, as asset publisher will filter and only show articles that match the user's value for that custom "interests" attribute
15:24 < Nudge:#liferay> the asset publisher might be a really good choice in my case
15:24 <@jhf:#liferay> Liferay is designed to deal with custom, user-targeted content with its built-in features, that you don't always have to re-code yourself :)
15:25 <@jhf:#liferay> many people do, and it gives you great flexibility, but takes some work to perfect.
15:27 <@jhf:#liferay> asset publisher and web content in general is one of the "bread and butter" features of Liferay, so you get a bunch of ancillary features, like the ability to subscribe to an asset publisher's output, to get email or RSS feeds when new news items show up that match its filters.
15:27 <@jhf:#liferay> and you can even customize the rendering of asset publisher - let IT do the filtering, and you write a custom template to render the result.
15:28 < Nudge:#liferay> nice
15:28 <@jhf:#liferay> so then your "editor" will simply create web content articles, select one or more categories, and that's your "editor application".
15:29 < Nudge:#liferay> Currently we use a cms that is very strong in combining a DDL-like data management with templates
15:31 <@jhf:#liferay> yep, Liferay's DDL feature is very similar
15:31 <@jhf:#liferay> you define the data "schema" and the you (or users) enter "records" and then you can display them using custom templates
15:31 <@jhf:#liferay> or export to a spreadsheet, etc
15:31 < Nudge:#liferay> usually our editors are publishing a new page by inserting a new data entry, then creating a url and choosing a template and connect it to their new entry id.
15:32 < Nudge:#liferay> if something similar is possible with liferay too, that would be great
15:32 < Nudge:#liferay> This way, I could avoid writing all that data portlet stuff for each entity type
15:33 <@jhf:#liferay> Liferay's DDL and Web Content concepts are very similar -- you define the "schema" and a "template" to render it, and you (or users) enter "records" -- in the DDL case, it is actually called a "record" but for web content it's the same concept only called "articles"
15:33 < Nudge:#liferay> Of course the hard thing about this is that there is a massive list of (somtimes unused) templates
15:34 <@jhf:#liferay> The "DDL Display Portlet" and "Web Content Display Portlet" function the same - to render one or more "records" (articles)
15:35 <@jhf:#liferay> asset publisher just filters and displays "many" articles
15:36 <@jhf:#liferay> btw, asset publisher can display more than just web content articles - it can display any kind of "asset" (hence the name).
15:36 < Nudge:#liferay> Your hints are very valuable for me. I will try these two next.
15:36 <@jhf:#liferay> "asset" in this case is web content, blogs, wikis, forum posts, announcements, bookmarks, anything that Liferay considers an "asset"
15:38 < Nudge:#liferay> One more question to "simple" web content: If an editor wants to write a simple paragraph, he creates a web content entry with it and selects it in a page that contains a web content display portlet, right?
15:39 < Nudge:#liferay> What happens if he wants to reference to something dynamic inside the paragraph?
15:42 <@jhf:#liferay> if it's a simple paragraph of HTML, he would create an 'unstructured' piece of web content, without any associated template, then add a 'web content display' portlet on a page, and configure it to show that specific piece of web content.
15:43 <@jhf:#liferay> it could only by HTML, with no dynamic stuff in it. for dynamic stuff, that's the job of a 'structured' web content article, with an associated template, written in velocity or free marker, which would access the 'fields' of the 'structure' (schema) of the web content article, and appropriately place them in HTML markup.
15:43 <@jhf:#liferay> for example, suppose you had a web content structure that had three fields representing a news article: "header" and "body" and "image"
15:43 < Nudge:#liferay> For the unstructured piece of HTML, I have seen the tinyMCE-like edit control. It is quite simple and when inserting a link, you can choose protocol, target and url. Is there some support to link to another liferay page using an internal id so that the link is resistent to url renaming?
15:44 <@jhf:#liferay> when the editor goes to create a new 'news' article, they would not be faced with a generic WYSIWYG editor. they would be faced with a screen with three boxes for input.
15:44 <@jhf:#liferay> in the first box, they would enter "Some Headline" (without any HTML markup)
15:44 <@jhf:#liferay> for the "Image" box, they would click a select box, and choose an already-uploaded image (or upload one right then and there)
15:45 <@jhf:#liferay> for the "body", they would be faced with a WYSIWYG field (if you wanted to give them that much editorial conttrol)
15:45 <@jhf:#liferay> then the template would look like
15:45 <@jhf:#liferay> <h1>
15:45 <@jhf:#liferay> $header.data
15:45 <@jhf:#liferay> </h1>
15:45 <@jhf:#liferay> <img src="$image.data"/>
15:45 <@jhf:#liferay> <p> $body.data </p>
15:46 <@jhf:#liferay> for your question about resistance to url renaming, yes, you can do that, but not directly in the WYSIWYG editor. you would define a "link to page" field in the web content structure
15:46 <@jhf:#liferay> then the editor would choose the page
15:46 <@jhf:#liferay> then in the template you'd have "<a href="$link_to_page.data">LINK</a>"
15:46 <@jhf:#liferay> you can also define "friendlyUrls" to pages
15:47 <@jhf:#liferay> so http://super-long-random-page-url is defined to be "http://mysite.com/vanityurl"
15:47 <@jhf:#liferay> then the editor COULD use the wysiwyg editor and use that pre-defined friendlyUrl which is guaranteed not to change, even if the page location changes
15:47 <@jhf:#liferay> also useful for SEO
15:48 < Nudge:#liferay> jhf: For the body-and-image-form: We use something similar as "section templates" today. I found this in liferay, it is very nice, I believe this will make our editors feel familiar with editing.
15:51 < Nudge:#liferay> Could I create a link-to-page-structure that is styled display:inline and an editor could pick it into the unstructured web content or does he/she then always have to end the previous web content, display the link-to-page below and start with the new text below the link again?
15:53 <@jhf:#liferay> very good question. I don't think it's possible to reference dynamic stuff from unstructured web content.
15:53 <@jhf:#liferay> i'll do some digging though.
15:53 <@jhf:#liferay> it'd be weird if you wanted to insert some dynamic link, to have to write half a paragraph in each of two structured text boxes
15:53 <@jhf:#liferay> plus, not very internationalizable
15:54 < Nudge:#liferay> btw, that also relates to a question that came to my mind earlier today: Does liferay support "nested" templates?
15:54 < Nudge:#liferay> Let's say I have a big-picture template for a pre-defined news-page layout.
15:56 < Nudge:#liferay> with a headline, sub-headline, a picture and some text or main content area. Within the main content area, it should be possible to just select between a  handful paragraph templates, one just text, one ist text and small picture left, one is a picture centered without text. Is this possible?
15:57 < Nudge:#liferay> The editor might add as many paragraphs as he likes.
15:58 <@jhf:#liferay> I need to do some digging on that too - structures can "inherit" from other structures, but I believe when Liferay renders a single article, it does so using only a single template.
15:58 <@jhf:#liferay> some folks on here tried to do a dynamic "include" of another article, but it was troublesome and I don't think they came to a good solution.
15:58 < Nudge:#liferay> that would we very interesting to us.
15:59 <@jhf:#liferay> as far as inserting dynamic stuff into unstructured content, there is a sort of "hack" way to do it. create a structure that has two fields: content and link. the content field is an HTML field. the link field is a "select link-to-page" field.
15:59 <@jhf:#liferay> in the content field you can put tokens which are recognized by a custom template.
15:59 < Nudge:#liferay> This might be okay, I think.
15:59 <@jhf:#liferay> for example, if you put "< a href="[[LINK]]">page</a>" in the html (the editor would have to know to do this)
16:00 <@jhf:#liferay> then the template could substitute the value of the link-to-page field in the template code.
16:00 < Nudge:#liferay> I think this "knowledge" could be manageable
16:00 <@jhf:#liferay> like <div class="mainContent">$stringUtil.replace("[[LINK]]", $link-to-page.data)</div>
16:01 <@jhf:#liferay> err
16:01 <@jhf:#liferay> <div class="mainContent">$stringUtil.replace($content.data, "[[LINK]]", $link-to-page.data)</div>
16:01 <@jhf:#liferay> it sucks because the editor would not be given a user-friendly UI for selecting the "[[LINK]]" - they would have to know what the token name was.
16:05 < Nudge:#liferay> Would it be possible to write a dropdown or search widget in a link-to-page-structure where the editor can choose the page to be linked?
16:05 < Nudge:#liferay> if its VM, maybe one can access liferay's content data base?
16:06 <@jhf:#liferay> yes, that's easy - the trouble is how the editor specifies WHERE in the middle of his HTML does the link appear
16:07 <@jhf:#liferay> there is already a 'link-to-page' field type for web content.
16:07 <@jhf:#liferay> but if the editor is writing the content paragraph in html (using ckeditor) then they'd have to know to stick a link called "[[LINK]]" into the html
16:07 < Nudge:#liferay> Well, I could image a field called ReplaceText, where the editor specifies the String he wants to be replaced with the url.
16:07 <@jhf:#liferay> sure you could do that too!
16:07 <@jhf:#liferay> that would be better than having to "know"
16:08 < Nudge:#liferay> s/image/imagine
16:09 < Nudge:#liferay> I'm sorry for bothering you with such details (and sometimes seemingly unrelated) questions.
16:10 < Nudge:#liferay> But we have a very good (and btw expensive) CMS, that many people in my organization love and use everyday.
16:10 <@jhf:#liferay> blasphemists!!!!!!
16:10 <@jhf:#liferay> ;-)
16:10 < Nudge:#liferay> And for all the new social, user-generated content, we need some new strategy.
16:10 < Nudge:#liferay> :-)
16:11 <@jhf:#liferay> well, give Liferay a shot, I'd be interested in seeing how it compares (as would our sales people I am sure)
16:11 < Nudge:#liferay> So actually we are also thinking about a combination.
16:11 <@jhf:#liferay> yeah we have a lot of customers that do 'best of breed' combinations
16:12 < Nudge:#liferay> Using the cms and its template, then feeding the results into Liferay, and let liferay "enrich" the more or less static content with customer ratings, comments and so on.
16:12 < jardineworks:#liferay> hey jhf can you not set render parameters in an IPC event handler?
16:13 < jardineworks:#liferay> sorry
16:13 <@jhf:#liferay> yeah you should be able to. make sure they are namespaced!
16:13 < jardineworks:#liferay> I am in an action handler
16:13 < jardineworks:#liferay> and I am firing an event
16:13 < jardineworks:#liferay> but I am also trying to set render parameters
16:13 < Nudge:#liferay> jhf: But before we enslave to such a complex situation, I think we should evaluate Liferay as-is (as single point of failure ;-))
16:13 < jardineworks:#liferay> but I keep getting an illegal argument exception
16:14 < jardineworks:#liferay> Caused by: java.lang.IllegalArgumentException
16:14 < jardineworks:#liferay> 	at com.liferay.portlet.StateAwareResponseImpl.setRenderParameter(StateAwareResponseImpl.java:177)
16:14 <@jhf:#liferay> the names of the parameters must be namespaced so for example from jsps put <portlet:namespace />paramName
16:14 <@jhf:#liferay> then from the action code access it with getParameter("paramName")
16:15 < jardineworks:#liferay> these aren't parameters for the event though
16:15 < jardineworks:#liferay> these are just for the current portlet
16:15 < jardineworks:#liferay> lemme pastebin my method
16:15 <@jhf:#liferay> k
16:15 < jardineworks:#liferay> jhf,  http://pastebin.com/CnPGEUK5
16:19 <@jhf:#liferay> that error means the name or value passed to setRenderParameter is null
16:19 <@jhf:#liferay> (looking at the source code to StateAwareResponseImpl)
16:20 <@jhf:#liferay> 		if ((name == null) || (value == null)) {
16:20 <@jhf:#liferay> 			throw new IllegalArgumentException();
16:20 <@jhf:#liferay> 		}
16:20 < jardineworks:#liferay> oh
16:20 < jardineworks:#liferay> hmmm
16:20 < jardineworks:#liferay> I see
16:20 < jardineworks:#liferay> if the user doesn't enter a query string then it would be null.
16:20 <@jhf:#liferay> looks like categoryIds may be null
16:20 <@jhf:#liferay> or that :)
16:21 < jardineworks:#liferay> 92 hours in 6 days
16:21 < jardineworks:#liferay> thats my excuse
16:21 <@jhf:#liferay> would've been nice if the error said "xxx is null"
16:21 <@jhf:#liferay> :)
16:22 < jardineworks:#liferay> lol
16:22 < jardineworks:#liferay> I'll take the stack trace over a JS error anytime
16:22 < jardineworks:#liferay> "Something is undefined."
16:22 < jardineworks:#liferay> :|
16:22 < jardineworks:#liferay> gee, thanks.
16:23 <@jhf:#liferay> https://www.cs.drexel.edu/~introcs/Fa10/notes/04.3_HCI/BadErrors.html?CurrentSlide=8
16:24 < jardineworks:#liferay> Unexpected error. Please investigate.
16:24 < jardineworks:#liferay> LOL
16:24 < jardineworks:#liferay> totally gonna start using that for all my messages.
16:24 < jardineworks:#liferay> "oops!"
16:24 <@jhf:#liferay> "OMG! LOL.."
16:25 < jardineworks:#liferay> HAHAH
16:25 <@jhf:#liferay> Bruno Admin is here.. we're doomed
16:25 < jardineworks:#liferay> "Please see the log." ... and then in the log I am gonna write "Please see the UI"
16:25 <@jhf:#liferay> hahaha
16:25 <@jhf:#liferay> good one
16:36 < Nudge:#liferay> Is it possible to have DDL relations, e.g. select an item from one list as field value of another? or have at least a look at a generated id?
17:13 <@jhf:#liferay> Nudge: nope, I don't think so.
22:07 < Guest82375:#liferay> hi anyone?
22:07 < Guest82375:#liferay> Im using liferay 6.2 CE version...and a bim problem happened...
22:08 < Guest82375:#liferay> about using jsonws remotly...without auth user...
22:09 < Guest82375:#liferay> some heard about this limitation ????
22:13 < Guest82375:#liferay> Hi
22:13 < circ-user-kj3z7:#liferay> Hi
