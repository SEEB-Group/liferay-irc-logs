--- Log opened Tue Nov 26 00:00:27 2013
01:28 < kermitt:#liferay> .
04:44 < hufg:#liferay> kermitt: see marketplace
04:59 < Tar-Minyatur:#liferay> Good morning.
05:00 < Tar-Minyatur:#liferay> Do you guys know what Liferay does when you provide all the JDBC connection settings instead of a JDBC pool name?
05:00 < Tar-Minyatur:#liferay> Does Liferay create it's own connection pool?
05:00 < Tar-Minyatur:#liferay> Because it looks like our Liferay opens way too many connections to the DB.
05:12 < hufg:#liferay> goood morning
05:35 < Tar-Minyatur:#liferay> Never mind. I found it.
06:27 < hufg:#liferay> i have a wicked problem with load balancer in front all redirects "fail" in liferay, 302 just doesn't happen and this affects the usability of the admin ui
06:27 < hufg:#liferay> seems pretty far fetched that liferay has this kind of a bug
06:29 < hufg:#liferay> essentially it's implying the host from request has some effect on liferay behavious
06:29 < hufg:#liferay> behaviour
06:29 < hufg:#liferay> doubt it :Z
06:43 < hufg:#liferay> i take that back
06:43 < hufg:#liferay> :D
06:55 < hufg:#liferay> there are some lfieray security settings in play here
06:59 < hufg:#liferay> no bug, feature!
07:45 < jardineworks:#liferay> hufg, Tar-Minyatur -- have you guys encountered the bug where portlets in a custom them execute their render method multtiple times on one load?
07:45 < hufg:#liferay> no
07:46 < jardineworks:#liferay> I suppose it would depend how many, if any, logging statements you have in your render method :)
07:46 < jardineworks:#liferay> I have a custom carousel portlet that loads 5 times!
07:47 < jardineworks:#liferay> https://issues.liferay.com/browse/LPS-40984
07:47 < jardineworks:#liferay> its listed as a minor big, but I would call it a little more severe than minor.
07:58 < hufg:#liferay> hmm portlets in a custom theme
07:58 < hufg:#liferay> you mean a portlet instantied in theme
07:59 < hufg:#liferay> that is very strange
07:59 < hufg:#liferay> we don't have a logging policy that would catch this
08:01 < hufg:#liferay> doesn't seem too legit
08:01 < hufg:#liferay> you can see sass failures in the linked forum post
08:04 < hufg:#liferay> anything is possible though but the correlation of custom theme and "duplicate" render request calls is a bit far fetched imho
08:05 < hufg:#liferay> have you tried using the classic theme?
08:07 < hufg:#liferay> i'm not saying you don't have problems just that the issue is very weak and lacks any insight, same for the forum post
08:32 < gruntz:#liferay> Hi. There's a bunch of tutorials how to setup liferay's tomcat with oracle xe database, but merely none which metions how to do this with liferay+jboss7 bundle, any useful links or hints will be very much appreciated!
08:48 < hufg:#liferay> doesn't the user guide have instructions for every applicatio nserver
08:48 < hufg:#liferay> then you have to figure out how to create jdbc resources for oracle in jboss7
08:54 < hufg:#liferay> with jboss7+bundle your only trouble is to configure jdbc resources
08:54 < Tar-Minyatur:#liferay> Mhm. Does anyone know what Liferay uses to build portlet.css?
08:54 < hufg:#liferay> without looking i'm saying sass
08:54 < hufg:#liferay> or what do you mean?
08:54 < Tar-Minyatur:#liferay> Yes. I guess so.
08:54 < Tar-Minyatur:#liferay> But where is the original.
08:55 < Tar-Minyatur:#liferay> There are loads of definitions in there, which I can't find anywhere.
08:55 < hufg:#liferay> the styled theme is the original
08:55 < Tar-Minyatur:#liferay> And the portlet.css only appears in the target/ folder.
08:55 < hufg:#liferay> at least in 6.1 there are three themes, styled, unstyled and classic
08:55 < hufg:#liferay> styled has admin ui styles predefined, unstyled has nothing(LOL) and classic is the showcase
08:55 < hufg:#liferay> so you derive your theme from unstyled which has the portlet.css
08:56 < Tar-Minyatur:#liferay> So I should be able to override some if the stuff and SASS will merge it with the original file from the classic theme?
08:56 < hufg:#liferay> then because maven plugin is so shitty you let DynamicCssFilter compile it to sass at runtime
08:56 < Tar-Minyatur:#liferay> *of
08:56 < hufg:#liferay> yes and how this happens totally depends on your theme b uild
08:56 < Tar-Minyatur:#liferay>  Mhm. My maven build seems to generate the portlet.css...
08:57 < hufg:#liferay> yes but it's still shitty, don't argue with me man!
08:57 < hufg:#liferay> 8)
08:57 < hufg:#liferay> you can't precompile sass with maven theme plugin 6.1.1
08:57 < hufg:#liferay> which means you either create your own compile and stab it into the heart of liferay maven theme plugin or let DynamicCssFilter do it's business
08:58 < hufg:#liferay> anyways just copy portlet.css to the same path, my understanding is that this will override the original
09:01 < gruntz:#liferay> hufg: thanks for help.
09:02 < hufg:#liferay> hmm /css/portlet.css
09:02 < hufg:#liferay> is the path
09:02 < hufg:#liferay> copy paste from original source, modify and hope the maven plugin compiles your sass and you are done
09:02 < hufg:#liferay> oh no scratch that i already forgot about dynamiccssfilter
09:02 < hufg:#liferay> no compiling
09:03 < Tar-Minyatur:#liferay> Ok. I'll try that. Thanks.
09:05 < hufg:#liferay> Tar-Minyatur: the maven plugin "overlays" the parent theme into your theme and keeps your files that are overlapping
09:05 < hufg:#liferay> or thats how it's supposed to work
09:06 < jardineworks:#liferay> hufg, I haven't actually dug into it yet to be honest ... I was just curious if anyone else has seen it too. Next week I am hoping to get to it.
09:06 < hufg:#liferay> hehe yeah
09:06 < jardineworks:#liferay> I'll let  you know if I find anything out
09:06 < jardineworks:#liferay> for now, the site still responds fast enough.
09:06 < hufg:#liferay> someone bought us shitty machines
09:07 < hufg:#liferay> no speed for me
09:07 < hufg:#liferay> !!
09:07 < jardineworks:#liferay> and it's not consistent as an issue which is very disconcerting. I mean the carousel portlet nearly always does it, but there are instances where it does not. And then I have some other portlets that never do it at all.
09:07 < hufg:#liferay> some indians moving them transistors
09:07 < hufg:#liferay> mm yes that is strange
09:08 < Tar-Minyatur:#liferay> Which theme does the Maven build use as parent?
09:09 < Tar-Minyatur:#liferay> I can't find a setting for it.
09:09 < hufg:#liferay> Tar-Minyatur: it's defined in build properties
09:09 < jardineworks:#liferay> hufg, the only immediate differnce I can see is that the portlets that are repeating themselves are pulling content from the cache.
09:09 < Tar-Minyatur:#liferay> I only have a pom.xml in there.
09:09 < hufg:#liferay> are you using liferays maven theme plugin
09:09 < hufg:#liferay> jardineworks: ok
09:10 < Tar-Minyatur:#liferay> The pom.xml uses liferay-maven-plugin to execute theme-merge, build-css and build-thumbnail.
09:10 < Tar-Minyatur:#liferay> But I can't find any setting that specifies which themes to merge.
09:11 < hufg:#liferay> <parentTheme></parentTheme>
09:11 < hufg:#liferay> you may have a version that has it hardcoded
09:11 < hufg:#liferay> in liferay-maven-plugin configuration
09:11 < hufg:#liferay> parentTheme property
09:13 < Tar-Minyatur:#liferay> <parentTheme>${liferay.theme.parent}</parentTheme>
09:13 < Tar-Minyatur:#liferay> Ah!
09:13 < Tar-Minyatur:#liferay> Getting closer.
09:13 < Tar-Minyatur:#liferay> This is specified in the parent maven project of our actual theme project.
09:14 < Tar-Minyatur:#liferay> Ah. Found it. Our theme is built on top of _styled.
09:15 < hufg:#liferay> yeah
09:17 < Tar-Minyatur:#liferay> Thanks!
09:17 < hufg:#liferay> np np
09:17 < Tar-Minyatur:#liferay> The whole theme idea sounds like a well thought-out concept to me.
09:17 < jardineworks:#liferay> hufg, when is your go live again?
09:18 < Tar-Minyatur:#liferay> Too bad they totally disregarded that in our project...
09:21 < hufg:#liferay> Tar-Minyatur: yes it's pretty impressive
09:41 < Tar-Minyatur:#liferay> Is override.css something that Liferay suggests for themes to use or did the idiots who did ours invent this?
09:41 < hufg:#liferay> no idea
09:41 < Tar-Minyatur:#liferay> (There are loads of directives with !important in there, so I guess it's just a quick and dirty approach again.)
09:42 < hufg:#liferay> 8)
09:44 < hufg:#liferay> Tar-Minyatur rotty3000 jardineworks if you ever have extra 18k euros to throw around and are interested in a constructive research topic regarding j2ee/liferay give me a call!
09:44 < hufg:#liferay> i haven't done my masters thesis yet 8)
09:45 < hufg:#liferay> constructive means it would involve coding hehe
09:50 < jardineworks:#liferay> hufg, you should pitch Brian Chan ... or someone at Liferay. Might be good PR for them -- as long as your findings are positive :)
09:51 < hufg:#liferay> 8)
09:52 < jardineworks:#liferay> hufg, do you use eclipse?
09:52 < hufg:#liferay> yes
09:53 < jardineworks:#liferay> hufg, do you know how to avoid eclipse stopping on the ThreadPoolExecutor breakpoint when in debug mode all the time? its so annoying.
09:53 < hufg:#liferay> hmm
09:53 < hufg:#liferay> whats that?
09:54 < hufg:#liferay> never encountered this problem
09:54 < hufg:#liferay> http://stackoverflow.com/questions/6290470/eclipse-debugger-always-blocks-on-threadpoolexecutor-without-any-obvious-excepti
09:55 < hufg:#liferay> no issues what so ever debugging liferay
09:55 < hufg:#liferay> liferay running on glassfish
09:56 < jardineworks:#liferay> its not an issue so much as an annoyance.
09:56 < hufg:#liferay> ok
09:56 < jardineworks:#liferay> I do most of my dev in debug mode so that I can step through it while I am working.. but when the threads finish the debugger alerts me (and I don't give a shit)
09:57 < jardineworks:#liferay> just wondering is there is a way to disable that particular alert that you know of.
09:57 < jardineworks:#liferay> I have added filters at both the package and the class level...
09:57 < jardineworks:#liferay> I have put an explicit breakpoint and disabled it...
09:57 < jardineworks:#liferay> but nothing seems to be happy
09:58 < jardineworks:#liferay> happy meaning work. It's fine, I'm the one that is grumpy :)
09:58 < hufg:#liferay> hehe
09:59 < hufg:#liferay> no idea :/
10:00 < jardineworks:#liferay> \o/
10:00 < jardineworks:#liferay> http://codesstore.blogspot.ca/2013/02/remove-threadpoolexecutor-break-point.html
10:00 < jardineworks:#liferay> the world before the internet must have been a really frustrating place.
10:01 < hufg:#liferay> 8)
11:16 < jardineworks:#liferay> can someone tell me what the proper way to reference an image (from the theme) in basic webcontent is?
11:17 < jardineworks:#liferay> using /[themename war folder/image/... can't be the right way. If someone changes the theme all the references break
11:38 < topolik:#liferay> jardineworks: themeDisplay.getPathImage() should be what you look for
11:58 < jardineworks:#liferay> topolik, in a scriptlet right?
11:58 < jardineworks:#liferay> that works for a jsp, but I cant use that in a piece of web content
11:59 < topolik:#liferay> ah, from web content
11:59 < jardineworks:#liferay> it actually prints out the themeDisplay.getPathThemeIamges()
11:59 < topolik:#liferay> if you were in a web content template, it would work
11:59 < jardineworks:#liferay> sure...
11:59 < topolik:#liferay> uhm, it's not very clean way, but you could use javascript
12:00 < jardineworks:#liferay> I could do that I suppose .. but seems silly to create an entire template for that
12:00 < jardineworks:#liferay> ew
12:00 < jardineworks:#liferay> :)
12:00 < topolik:#liferay> :)
12:00 < jardineworks:#liferay> I think I will just use a template.
12:00 < jardineworks:#liferay> no worries
12:00 < topolik:#liferay> or
12:00 < topolik:#liferay> you can use some placeholder
12:00 < topolik:#liferay> that you reference from the theme
12:00 < topolik:#liferay> like
12:01 < topolik:#liferay> asdf <span class="myIcon" /> xxx
12:01 < topolik:#liferay> and in the theme's CSS have sth like this:
12:02 < topolik:#liferay> .myIcon {background-image: url('...'); display: block; width: XXpx; height: YYpx;...}
12:04 < jardineworks:#liferay> that is some kid of magic that is beyond my front end science
12:04 < jardineworks:#liferay> :)
12:04 < jardineworks:#liferay> topolik, separate question though. I have a custom authenticator. After the user logs in I want to redirect them to where they were before they signed in (like LR does by default)
12:05 < jardineworks:#liferay> My authentication flow might in some cases go through several steps though.
12:05 < jardineworks:#liferay> I know there is a saveLastPath value... does 0 mean DON'T ... as in don't overwrite what is there?
12:31 < topolik:#liferay> jardineworks: let me see
12:34 < topolik:#liferay> ok
12:34 < topolik:#liferay> saveLastPath is true by default
12:34 < topolik:#liferay> that means
12:35 < topolik:#liferay> when you request a page, portal stores current URL into LAST_PATH request attribute and then into session
12:36 < jardineworks:#liferay> ok -- so if I set LAST_PATH to 0 in a call, does that mean, don't save the current url?
12:36 < topolik:#liferay> you need to set "saveLastPath=0" in a request parameter!
12:36 < jardineworks:#liferay> ok .. I do that
12:36 < topolik:#liferay> then, this URL won't overwrite the last path
12:36 < jardineworks:#liferay> soooo
12:37 < jardineworks:#liferay> If I am on an order page for example.
12:37 < jardineworks:#liferay> and I don't set the value ... it will save that location
12:37 < jardineworks:#liferay> and then as I step through the other pages I set saveLastPath, 0 ... then the last path will continue to store my order page
12:37 < jardineworks:#liferay> right?
12:37 < topolik:#liferay> yes,
12:37 < topolik:#liferay> I believe
12:37 < jardineworks:#liferay> good cover ;)
12:38 < topolik:#liferay> but
12:38 < jardineworks:#liferay> and then at the end I just say if there is a last path in the session, send the user there?
12:38 < topolik:#liferay> there is one thing I need to check
12:38 < topolik:#liferay> ah, yes
12:38 < topolik:#liferay> it should be in the session even after log in
12:39 < jardineworks:#liferay> so session.getAttribute("LAST_PATH"); will give me a url I can forward the user to?
12:40 < jardineworks:#liferay> or is there a way that post login, lr will do that for me? isn;t there a property for this?
12:40 < jardineworks:#liferay> I feel like I have seen one before.
12:51 < topolik:#liferay> yes
12:51 < topolik:#liferay> it works OOTB
12:51 < topolik:#liferay> but under some conditions
12:52 < topolik:#liferay> https://github.com/liferay/liferay-portal/blob/6.1.2-ga3/portal-impl/src/com/liferay/portal/struts/PortalRequestProcessor.java#L162,L163
12:52 < topolik:#liferay> this means, you need to redirect to MainServlet after log in, but should not specify any struts action/mapping
12:53 < topolik:#liferay> i.e. go to "/c"
13:00 < jardineworks:#liferay> hmmm
13:01 < jardineworks:#liferay> topolik, so if I have a custom authenticator that returns TRUE (assumign the user passed the checks), how do I do it? specify a redirect parameter in the inital call of "/c"?
13:03 < jardineworks:#liferay> topolik, hmmm.. but I need to make sure that the default landing page attribute is not set then right?
13:20 < jardineworks:#liferay> topolik, got it! including the oauth and rest login actions :)
13:20 < jardineworks:#liferay> thank you!
