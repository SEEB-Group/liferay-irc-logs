--- Log opened Mon Feb 03 00:00:04 2014
01:45 < gok_:#liferay>  /msg NickServ REQUESTPASSWORD gokulvsmail@gmail.com
03:33 -!- ServerMode/#liferay [+o ChanServ] by sendak.freenode.net
03:40 -!- ServerMode/#liferay [+o ChanServ] by sendak.freenode.net
03:59 -!- ServerMode/#liferay [+o ChanServ] by sendak.freenode.net
10:17 -!- mode/#liferay [+o rotty3000] by ChanServ
11:24 -!- ServerMode/#liferay [+o ChanServ] by sendak.freenode.net
11:44 < _pier:#liferay> gulp
11:44 < _pier:#liferay> Did I miss the drawing?
11:44 < _pier:#liferay> :\
11:44 < _pier:#liferay> I’m Pier Paolo
12:05 -!- mode/#liferay [+o rotty3000] by ChanServ
12:09 -!- mode/#liferay [+o jhf] by ChanServ
12:25 < jardineworks:#liferay> jhf, rotty3000 do either of you know if it is possible to set meta tags in a page programatically (from the portlets on the page?)
12:30 < jardineworks:#liferay> I know you can use the PortalUtil to set the description and the page title dynamically, but I can't seem to find a way to add meta-tags.
12:30 < jardineworks:#liferay> would it just be portletResponse.setHeader("...", "...");??
12:31 < jardineworks:#liferay> wait -- that doesn't make sense.
12:53 < _pier:#liferay> @jardineworks you can use <liferay-util:html-top />
12:54 < _pier:#liferay> portletResponse.setHeader is for HTTP headers
12:54 < jardineworks:#liferay> _pier, right -- I realized your second comment as soon as I wrote it. It has nothing to do with the document :). I'll check out the first one though! I didn't know about that one.
12:56 < _pier:#liferay> It’s a buffer which injects the buffered content into the WebKeys.HTML_TOP request attribute
12:56 < _pier:#liferay> which is then spit out in the html head
12:56 < _pier:#liferay> there’s also liferay-util:html-bottom
12:56 < _pier:#liferay> which puts content just before the body closes,
12:56 < _pier:#liferay> if I remember correctly
12:57 < jardineworks:#liferay> _pier, so if I do <liferay-util:html-top><meta name="og:title" value="this is my title"/></liferay-util:html-top> then it'll add that tag to the <head></head> section?
12:57 < jardineworks:#liferay> and I can do that from any jsp in a plugin?
12:58 < _pier:#liferay> ooooh yes
12:58 < _pier:#liferay> and that’s exactly how I use that the most,
12:58 < _pier:#liferay> for opengraph metatags ;)
12:58 < jardineworks:#liferay> _pier, awesome. Thanks so much! :)
12:58 < jardineworks:#liferay> stupid facebook
12:59 < jardineworks:#liferay> i pray for a world where people become anti-social :)
12:59 < _pier:#liferay> http://www.casamania.it/contemporary/-/oneshop/Accessories+Contemporary/Compass?p_p_state=pop_up
12:59 < _pier:#liferay> That’s a page for a project of us
13:00 < _pier:#liferay> have a look at the html source :D
13:00 < _pier:#liferay> *of a project
13:11 < whatsoever:#liferay> hi guys, how can i call a function from my .java file in my (e.g) view.jsp ?
13:15 < whatsoever:#liferay> my java  file is called "TestConnect.java", so i did an import: <%@page import="com.test.TestConnect" %>   is that right? if i wanna call a function from the java file, it says: The method getProcesses() is undefined for the type   __2F_testApi_2D_portlet_2F_docroot_2F_html_2F_testconnect_2F_view_2E_jsp
13:15 < jardineworks:#liferay> _pier, awesome. Just what I am looking for. Thanks.
13:16 < jardineworks:#liferay> whatsoever, yes
13:16 < jardineworks:#liferay> now make a scriplet ...
13:16 < jardineworks:#liferay> <% %>
13:16 < jardineworks:#liferay> and in there do TestConnect tc = new TestConnect();
13:16 < jardineworks:#liferay> then tc.[yourmethodname]()
13:16 < jardineworks:#liferay> whatsoever, or, make the method static and just do TestConnect.[yourmethodname]();
13:17 < whatsoever:#liferay> im trying the first way now, ty and second
13:18 < whatsoever:#liferay> nice, seems to work :D
13:19 < whatsoever:#liferay> now another problem: i need a PortletContext / ApplicationContext: i used actionRequest to get it and it worked: But when i use actionrequest , ive always had an form where i pressed a button ... any other ways to do that?
13:27 < jardineworks:#liferay> whatsoever, I think you can get the context from the renderRequest as well which is available in the jsp already as "renderRequest"
13:27 < jardineworks:#liferay> without the quotes obviously
13:27 < whatsoever:#liferay> hm well
13:27 < whatsoever:#liferay> i dont want to use the jsp to connect to the API, so i want to do it in functions
13:27 < whatsoever:#liferay> its looking like that atm: http://pastebin.com/JcgQUfGe
13:31 < whatsoever:#liferay> hmmm, can i get the context in my jsp and call the function with the context?
