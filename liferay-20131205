--- Log opened Thu Dec 05 00:00:40 2013
04:23 < hufg:#liferay> are you aware how great glassfish command line tooling is?!
04:23 < hufg:#liferay> it's fucking awesome
09:22 < hufg:#liferay> topolik:
09:23 < hufg:#liferay> how come multiple publishings does not apparently decrease the disk writes from dl?
09:35 < hufg:#liferay> there is a huge write of small files to tmp either way
09:36 < hufg:#liferay> i think some 800mb with our dl
09:36 < hufg:#liferay> not sure
09:42 < hufg:#liferay> so yeah basically the publish range does not work at all for dl maybe it works at later staging but the same writes happen
10:18 < Tar-Minyatur:#liferay> I can't believe that there is no proper documentation on how to setup a Liferay cluster on Amazon EC2.
10:18 < Tar-Minyatur:#liferay> We can't be the only ones who want to do this. Oo
10:19 < hufg:#liferay> :D
10:19 < hufg:#liferay> better believe it
10:20 < hufg:#liferay> isn't jgroups unicast the only way?
10:20 < hufg:#liferay> if multicast is not supported
10:20 < Tar-Minyatur:#liferay> I honestly don't know the details of how EHCache works.
10:21 < Tar-Minyatur:#liferay> There is stuff like JDBC_PING and S3_PING for node-detection.
10:21 < Tar-Minyatur:#liferay> But I have no clue if that would be sufficient.
10:21 < hufg:#liferay> or  some crazy stuff on ehcache+san drives for lucene and dl
10:22 < hufg:#liferay> without knowing anything i'd go for jgroups unicast
10:23 < hufg:#liferay> :)
10:25 < hufg:#liferay> just disable caching hehe
11:16 < Tar-Minyatur:#liferay> Wow.
11:16 < Tar-Minyatur:#liferay> For some reason or new test system is incredibly slow.
12:18 < aj_:#liferay> topolik! \o/
12:18 < topolik:#liferay> aj_: !
12:18 < aj_:#liferay> I know this is your limited availability time -- but I just wanted to run an issue I am having past you
12:18 < aj_:#liferay> when yo uhave time...
12:18 < aj_:#liferay> here it is
12:18 < topolik:#liferay> sorry I didn't respond yesterday or when it was
12:19 < topolik:#liferay> when I got back to laptop you were already off
12:20 < aj_:#liferay> topolik, I have a parent navigation item -- Recipes. Underneath this parent I have several children. Each child represents a -- shocking I know -- type of recipe. Wehn the user click the Recipe "parent" they go to a portlet page. Done. When the user clicks one of the children they go to the recipe page as well, with the child category applied. I have made the children "link to page" and picked recipes. Then under advanced, I addred a query strin
12:20 < aj_:#liferay> g in the text field category=[category]. But It doesn't seem to make it
12:21 < aj_:#liferay> I stepped through the portal impl last night and I can see the query string being added in one case (there are a few portlets on that page)... but no mater which portlet I dig into it is never there.
12:22 < aj_:#liferay> I am using String category = PortalUtil.getOriginalServletRequest(PortalUtil.getHttpServletRequest(renderRequest)).getParameter("category");
12:22 < aj_:#liferay> I inspected the request as well and the query string only ever seems to contain the layout id and the virtual layout id
12:23 < topolik:#liferay> aj_: that's because there is an internal redirect from friendly urls into /c/portal/layout?p_l_id=...
12:23 < aj_:#liferay> right -- and that is where I saw it append the query string
12:23 < aj_:#liferay> I mean that value certainly looks familiar
12:24 < aj_:#liferay> so how am I supposed to get it?
12:26 < topolik:#liferay> well, I don't know, I didn't use it yet :)
12:26 < topolik:#liferay> but I look at it and tell you :D
12:26 < topolik:#liferay> how does your query string look like?
12:29 < aj_:#liferay> just catergory=[name] ... so category=main-dish or category=appetizer
