--- Log opened Fri Sep 05 00:00:07 2014
--- Log opened Fri Sep 05 03:21:09 2014
03:21 -!- Topic for #liferay: Liferay Community Discussion Channel! *THIS CHANNEL IS LOGGED* (Log: http://goo.gl/SMte1N) Plz be patient - timezones matter :)  Please nominate Liferay! http://goo.gl/bIspUh Liferay 6.2 GA2 RELEASE http://goo.gl/uclhsq   Forum: http://forums.liferay.com Homepage: http://liferay.org User Groups http://goo.gl/WFVtPe Nightly build http://goo.gl/vQngHn
03:21 -!- Topic set by jhf [~cygnuseck@97.101.250.88] [Thu Jun 19 16:32:35 2014]
03:21 [Users #liferay]
03:21 [@ChanServ    ] [ Bryanstein] [ jardineworks_] [ marcoceppi  ] [ Tm_T   ] 
03:21 [ ArTeS       ] [ gogamoga_ ] [ jbonjean     ] [ Naenyn      ] [ topolik] 
03:21 [ avinashrbhat] [ Gorith    ] [ longbeach    ] [ quercus     ] [ twen   ] 
03:21 [ bijoo       ] [ henriquev ] [ Magno8ooter^ ] [ Tar-Minyatur] 
03:21 -!- Irssi: #liferay: Total of 19 nicks [1 ops, 0 halfops, 0 voices, 18 normal]
03:21 -!- Channel #liferay created Wed Nov 11 15:40:06 2009
03:21 -!- Irssi: Join to #liferay was synced in 6 secs
04:41 < Axxell:#liferay> anyone feel like helping me make my portlet searchable?
04:42 < Axxell:#liferay> would really appreciate
04:42 < Axxell:#liferay> it
05:03 < Axxell:#liferay> i get a nullpointerexception when reindexing in searchpermissioncheckerimpl
05:05 < Axxell:#liferay> i do a searchengineutil.updateDocuments
05:19 < Axxell:#liferay> anyone?
05:50 < nicolas_FR:#liferay> sorry can't help you with that
06:36 < Axxell:#liferay> anybody else feel like helping
06:46 < Axxell:#liferay> anyone else?
07:12 < nicolas_FR:#liferay> hi there
07:13 < nicolas_FR:#liferay> got an error on deployment (6.1.2) that fmt_rt cannot be resolved in web.xml or in jar files... any advice on which dependency I'm missing ?
08:49 < dave_k:#liferay> Hey all ... In a custom portlet, I have multiple filter inputs to search for Users using LazyLoading for pagination. Now I want to add an organization filter -- i.e. search for Users that are in a certain organization. Doing this via OrganizationLocalServiceUtil.search() breaks LazyLoading... I need a method to ask the DB to do the combined filtering for me. What are my options here?
10:20 < jardineworks_:#liferay> dave_k, what about a dynamic query?
10:22 < jardineworks_:#liferay> though dynamic queries don't provide any caching (I think)
10:22 < jardineworks_:#liferay> the nice thing about the *LocalServiceUtil is that they do.
10:40 < dave_k:#liferay> jardineworks_: Dunno about that... need to check it. At least I got a keyword now :)
10:41 < jardineworks_:#liferay> dave_k, also, if you have both Users and Organizations being indexed in Lucene, you might be able to do what you are doing by using BooleanQuery searches
10:41 < dave_k:#liferay> jardineworks_: I already dropped index search for substring matching...
10:42 < jardineworks_:#liferay> dave_k, for substring matching? meaning you need to do it and don't feel you can with search?
10:42 < jardineworks_:#liferay> because you can :)
10:43 < dave_k:#liferay> jardineworks_: interesting. because the primefaces4-users-portlet code has a comment stating it doesn't
10:45 < dave_k:#liferay> jardineworks_: anyway, I could not find any searchCount() for the search index. that broke my pagination.
10:45 < jardineworks_:#liferay> dave_k, well, it's wrong. YOu can do wildcard searches in lucene.... what good is a search engine that only works with EXACT matches!
10:46 < jardineworks_:#liferay> searchContext.setStart() and searchContext.setEnd() I think... but you would need a index.getHitCount() I think it is?
10:46 < jardineworks_:#liferay> for the totla.
10:46 < jardineworks_:#liferay> I mean
10:47 < jardineworks_:#liferay> dave_k, anyway, point is that there is always more than one way to do something in LR :)
10:48 < dave_k:#liferay> half exact. I used the indexer version of UserLocalServiceUtil.search() with start and end arguments, but the searchCount() mismatched if I used wildcards.
10:49 < dave_k:#liferay> jardineworks_: see also https://issues.liferay.com/browse/LPS-49744
10:49 < jardineworks_:#liferay> dave_k, Looks line you would do Indexer.search() which would give you Hits ... and then hits.getDocs().length
10:50 < jardineworks_:#liferay> dave_k, Oh. I was thinking of creating your own search context and bollean query -- not necessarily using one from the UserLocalServiceUtil.
10:50 < jardineworks_:#liferay> boolean*
10:50 < dave_k:#liferay> jardineworks_: but if I need LazyLoading, I don't have the complete Hits List.
10:50 < jardineworks_:#liferay> dave_k, how many items are there in total?
10:50 < jardineworks_:#liferay> do you expect anyway
10:51 < dave_k:#liferay> > 5K
10:52 < jardineworks_:#liferay> pfft... I wouldn't bother getting caught up in the romance of lazy loading for 5000 results. Lucene could handle that with about 0.1% of the CPU. if you REALLY want to do it, you can get the count from the UserLocalServiceUtil class since its reference (the database) should be in synch with the index anyway.
10:55 < dave_k:#liferay> jardineworks_: but the result list is not in sync, because the indexer and the DB use different matching
10:55 < jardineworks_:#liferay> dave_k, in fact, if its a feature that is going to be hit with so much traffic that lazy loading would be beneficial, then it might also be beneficial to simply load a large set (say the first 1000 records into the cache and reference it from there. Of course now I am just speculating since I have no idea what you are doing :)
10:55 < jardineworks_:#liferay> dave_k, what do you mean "different matching"?
10:58 < dave_k:#liferay> I give the indexer the keyword "foo". It returns all records with the whole word "foo". -- I give the DB the keyword "foo". It returns all records containing the substring "foo".
10:59 < dave_k:#liferay> I give the indexer the keyword "foo*". It returns all records with a whole word starting with "foo". -- I give the DB the keyword "foo*". It returns no records, cause no one is named "Foo*"
11:02 < jardineworks_:#liferay> dave_k, oh I see... but what I meant was to get the total record could you could do UserLocalServiceUtil.getOrganizationUsersCount( organizationId, WorkflowStatus.STATUS_APPROVED );
11:03 < jardineworks_:#liferay> then that would tell you that you have 5000 records.
11:03 < jardineworks_:#liferay> whcih means you SHOULD, if indexer is working properly have 5000 documents in lucene
11:04 < dave_k:#liferay> ah, but I need the total amount _after_ arbitrary filtering
11:05 < jardineworks_:#liferay> dave_k, THEN! that is the hits.getDocs().length :)
11:05 < jardineworks_:#liferay> I'm not helping am I? I'm just being difficult hahah
11:05 < jardineworks_:#liferay> though I am TRYING to help I swear
11:06 < dave_k:#liferay> jardineworks_: NOT if I gave start and end to the method returning me the hits
11:07 < dave_k:#liferay> jardineworks_: oh, you already helped me. By mentioning the method I needed at a different spot in the code ;)
11:07 < jardineworks_:#liferay> ah -- good point with the start and end
11:08 < jardineworks_:#liferay> though is till maintain that 5000 docs for a response is nothing for Lucene to manage... and if you start filtering and it starts dropping to 1000, 700, 500, 98, ... etc. then it becomes even easier right? I wouldn't bother giving the pagination to the boolean query unless I started to explicitly see a performance issue.
11:16 < dave_k:#liferay> I already had such a performance issue. The dev machine is not the best, but 8 sec for certain requests are bad. Some of the performance hit comes from augmenting the result lists with data from a secondary DB... it's complicated...
11:25 < jardineworks_:#liferay> dave_k, I was gonna say -- I very much doubt much of that 8 seconds has anything to do with Lucene. Are you using caching at all?
11:27 < dave_k:#liferay> jardineworks_: I doubt that, too. But not using the index was still faster by a small bit. The problem is in augmenting the result list, especially when there are filters on both data sources.
11:30 < jardineworks_:#liferay> hmm.
11:30 < jardineworks_:#liferay> dave_k, so are you getting, for example, Users from the search index and then adding additional (unindexed values) from the User_ table?
11:33 < dave_k:#liferay> jardineworks_: well yes, I get all User objects that should be displayed on the current page.
11:36 < jardineworks_:#liferay> dave_k, hmm... perhaps hooking some of your own indexer processors might be the best option... you could augment the index with additional attributes.
11:37 < jardineworks_:#liferay> dave_k, I've never done it to be honest, but I believe you can do that.
11:49 < dave_k:#liferay> jardineworks_: would be a completely different approach from what I've done the last two weeks...
11:56 < jardineworks_:#liferay> dave_k, don't hate me! :) https://www.liferay.com/documentation/liferay-portal/6.2/development/-/ai/extending-the-indexer-post-processor-liferay-portal-6-2-dev-guide-10-en
