--- Log opened Mon Sep 16 00:00:22 2013
02:57 -!- mode/#liferay [+o rotty3000] by ChanServ
04:08 < Tar-Minyatur:#liferay> Morning.
04:09 < Tar-Minyatur:#liferay> When I try to run ServiceBuilder from Eclipse, I get a java.lang.ClassNotFoundException: com.liferay.portal.kernel.io.unsync.UnsyncStringReader even when I try with a freshly created project and services.xml with the example Foo entity.
04:09 < Tar-Minyatur:#liferay> Anybody ever encountered something like this? I'm  litte lost now as to what might cause that.
04:21 < Tar-Minyatur:#liferay> (The same happens when I execute ant build-service manually in the console.)
04:50 < Tar-Minyatur:#liferay> Looks like that should be part of portal-service.jar...
04:52 < Tar-Minyatur:#liferay> And it also looks like that's not part of the classpath. *frown*
05:28 < charith:#liferay> hi,
05:28 < charith:#liferay> i m setting up a liferay cluster
05:28 < charith:#liferay> i have configured ehcache using rmi
05:28 < charith:#liferay> i m not getting any error
05:29 < charith:#liferay> how can i confirm that ehcache synchronize with other nodes ?
07:58 < jardineworks:#liferay> morning guys
07:59 < Tar-Minyatur:#liferay> Hey there.
08:18 < jardineworks:#liferay> topolik, are you around
08:24 < Tar-Minyatur:#liferay> jardineworks: You were right btw...looks like Maven was the culprit that messed up my ServiceBuilder. No clue why...
08:24 < topolik:#liferay> hi jardineworks
08:24 < Tar-Minyatur:#liferay> And it will be a problem at some point, because I need to integrate that with our existing Maven builds. :-/
09:00 -!- mode/#liferay [+o jhf] by ChanServ
09:17 < jardineworks:#liferay> Tar-Minyatur, I've read a lot of posts from people trying to get Maven to work with LR. I haven't read anything in a while, but since your code worked on ANT, it was a reasonable conclusion :)
09:18 < jardineworks:#liferay> topolik, sorry I vanished. I think I figured out my answer though. Basically what I was trying to do is, really, just a gross hack so I'll come up with something different :)
09:18 < topolik:#liferay> haha, ok :)
09:20 < Tar-Minyatur:#liferay> jardineworks: Yeah. Probably. I guess I'll have to setup the Maven stuff by hand.
09:20 < Tar-Minyatur:#liferay> Anyway...I've got a question for you guys. I asked that before, but it's become more complicated and I really could use some ideas.
09:21 < Tar-Minyatur:#liferay> We often do special promotional campaigns on the site. These are sometimes fairly complex with a lot of assets (JS, CSS, Images, ...) and, of course, markup.
09:21 < Tar-Minyatur:#liferay> What would be the best solution to do that in Liferay when the assets have to be easily updateable?
09:24 < jardineworks:#liferay> Tar-Minyatur, can you give mea concrete example?
09:25 < Tar-Minyatur:#liferay> Okay. I'll try.
09:25 < Tar-Minyatur:#liferay> A designer creates the campaign...standalone as HTML project with a complex folder structure.
09:25 < Tar-Minyatur:#liferay> js/core/something/somefile.js
09:25 < Tar-Minyatur:#liferay> Etc.
09:25 < Tar-Minyatur:#liferay> The same for CSS and images.
09:26 < Tar-Minyatur:#liferay> The HTML markup is fairly simple, because the JS does a lot of dynamic stuff once the page has been loaded.
09:26 < Tar-Minyatur:#liferay> Now this has to be placed on a Liferay page.
09:26 < Tar-Minyatur:#liferay> Normally I would wrap it in a portlet and be done with it.
09:27 < Tar-Minyatur:#liferay> However, quickly updating the assets would not be possible, because every change would require a new deployment.
09:57 < jardineworks:#liferay> Tar-Minyatur, waht about dusing the look-and-feel menu option for the portlet where you can provide css and js overrides to both the theme and portlet level files.
09:58 < Tar-Minyatur:#liferay> I think the main concern are the images.
09:58 < Tar-Minyatur:#liferay> But a good point...CSS and JS could possibility be customzized via overrides.
10:00 < jardineworks:#liferay> put the images in the document and media
10:00 < jardineworks:#liferay> and then make the portlet reference them using a conditional
10:01 < Tar-Minyatur:#liferay> That would split the deployment process into two separate steps.
10:01 < jardineworks:#liferay> oso for exmaple, all the images are under campaings/[campaign-name]/ and then make the portlet configurable such that you choose a camppaign to render
10:01 < Tar-Minyatur:#liferay> Mhm.
10:02 < Tar-Minyatur:#liferay> It should be possible to override any images via CSS or JS.
10:03 < Tar-Minyatur:#liferay> So technically it would be possible to have short-term fixes for campaigns by uploading the changed image via DL and add rules in either CSS or JS.
10:06 < jardineworks:#liferay> in fact,
10:06 < jardineworks:#liferay> :)
10:06 < jardineworks:#liferay> ...
10:06 < jardineworks:#liferay> I wonder if you could store ALL assets in the DL
10:06 < jardineworks:#liferay> and then just have the portlet comfigurable for a campaign ... and then have it pull in the assets dynamically.
10:06 < jardineworks:#liferay> even the template.
10:28 < Tar-Minyatur:#liferay> But the DL can't represent a folder structure.
10:28 < Tar-Minyatur:#liferay> Everything has IDs.
10:28 < Tar-Minyatur:#liferay> So we would have to rewrite the entire campaign, because all the asset URLs wouldn't work anymore.
10:34 < jardineworks:#liferay> Tar-Minyatur, You can create a folder structure in documents and media right? surely that is represented somehow -- it has to be, if not then how would LR render it correctly when you return
10:34 < jardineworks:#liferay> topolik, are you still there?
10:34 < Tar-Minyatur:#liferay> jardineworks: I tried that just now...the folder is not represented in the URL.
10:35 < Tar-Minyatur:#liferay> It's always documents/xxxxx/xxxxx/filename.end
10:35 < Tar-Minyatur:#liferay> Something like this.
10:35 < jardineworks:#liferay> topolik, I have a sensible question. I have some external libs that I have placed in sdk/lib. Is there a way to have them copied to my plugins/lib folder?
10:36 < jardineworks:#liferay> Tar-Minyatur, but in the portlet logic when you are assembling the assets, is it not possible on the service with the object to figure out a "virtual" hierarchy?
10:36 < jardineworks:#liferay> I shoudl specify that I have little experience with documents and media... so I am just throwing out ideas here. In a couple of weeks though i think I will be where you are.
10:36 < Tar-Minyatur:#liferay> I haven't gone that far yet.
10:36 < jardineworks:#liferay> I have to do something similar for my current project.
10:36 < Tar-Minyatur:#liferay> Still trying to find the best solution.
10:39 < jardineworks:#liferay> Tar-Minyatur, here is what I envisioned (end to end)
10:39 < jardineworks:#liferay> 1. User creates HTML representing campaign.
10:39 < jardineworks:#liferay> 2. User logs into LR and in the control panel create a new subfolder called [campaign-name]
10:40 < jardineworks:#liferay> 3. under thee they diustribute to js, css, images, and template
10:40 < jardineworks:#liferay> 4. Add a page and place your "Campaign portlet" on it
10:40 < jardineworks:#liferay> 5. Configure the portlet (through a preference) with the campaign you want to use
10:40 < jardineworks:#liferay> 6. When the portlet runs on the server --
10:40 < jardineworks:#liferay> a. Retrieve the campaign name
10:41 < jardineworks:#liferay> b. retrieve the folder with the assets from the DL
10:41 < jardineworks:#liferay> c. include the template as the jspf fragment
10:41 < jardineworks:#liferay> .. and I assum the jspf fragment will have the references to the images, css, js, etc.
10:42 < jardineworks:#liferay> everything after 6 is all theory though -- I have not done this before.
10:47 < jardineworks:#liferay> Tar-Minyatur, Check out the portal source /html/portlet/document_library_display folder. I'll bet you can find some reuseable stuff in there.
10:50 < Tar-Minyatur:#liferay> Sounds pretty much like what I thought.
10:51 < Tar-Minyatur:#liferay> Only difference to my idea is that I intended the campaign to be uploaded as a ZIP file and be extracted on the server.
10:51 < Tar-Minyatur:#liferay> Because uploading everything one-by-one would be rather annoying.
11:10 < jardineworks:#liferay> Tar-Minyatur, even better for sure. an import/export function would make life easy, but I like to start with bare bones functions and then build on it iteratively.
11:11 < scribe:#liferay> Hey guys.  Is it easy to rename the default site in liferay 6.1ga2?
11:11 < jardineworks:#liferay> Tar-Minyatur, com.liferay.portal.kernel.repository.model.Folder
11:11 < jardineworks:#liferay> Tar-Minyatur, used by com.liferay.portlet.documentlibrary.search.EntriesChecker
11:13 < jardineworks:#liferay> scribe, not sure... I think I tried copying the site and giving it a different name... but I'm not sure if I was able to delete the original one
11:13 < jardineworks:#liferay> I never found a "rename" function
11:14 < jardineworks:#liferay> scribe, what happens if you chage it in the portal-setup.wizard.properties and restart the server?
11:16 < scribe:#liferay> trying....
11:16 < topolik:#liferay> jardineworks: you want to copy that libs during packaging?
11:17 < jardineworks:#liferay> topolik, just 3 of them .. the 3 that I put in there. I just don't want to have to manually copy them to each of my plugins
11:17 < jardineworks:#liferay> topolik, I WOULD PREFER to put them in TOMCAT_HOME/lib/ext since they are used by ALL my plugins.
11:17 < jardineworks:#liferay> BUT
11:18 < jardineworks:#liferay> topolik, I can't get the JULI logging to be displayed in the log. So far the only way I have had success is to load it in the plugin
11:18 < topolik:#liferay> hmm
11:18 < jardineworks:#liferay> and no one knows how to solve this apparently -- http://stackoverflow.com/questions/18804111/how-to-get-my-jar-in-tomcat-to-write-log-output
11:18 < jardineworks:#liferay> shocking. I have never had a SO post go unanswered
11:20 < topolik:#liferay> hmm, I don't understand your question there
11:21 < topolik:#liferay> Tomcat is using JULI, but seems that only for internal purposes
11:21 < scribe:#liferay> jardineworks, it didn't seem to do anything. The only thing in portal-setup.wizard.properties with out default site name is: company.default.name=NTVMR
11:21 < scribe:#liferay> jardineworks, thanks for the suggestion though.  It's not that important, I guess.
11:23 < topolik:#liferay> jardineworks: and portal doesn't use JULI, it uses commons logging/log4j around standard java logging
11:23 < topolik:#liferay> jardineworks: so I don't think portal ever loads your logging classes in that JAR
11:31 < jardineworks:#liferay> topolik, but placing those jars in lib/ext means TOMCAT loads them not the portal right?
11:31 < jardineworks:#liferay> and TOMCAT uses JULI by default
11:31 < jardineworks:#liferay> so I assumed that it would use the same JULI configuration that the application container itself was using.
11:36 < topolik:#liferay> uhm, I think that lib/ext is loaded by common classloader for web apps
11:36 < topolik:#liferay> not for tomcat itself
11:38 < topolik:#liferay> when I start my local tomcat, I see: ... -Djava.endorsed.dirs=/opt/liferay.git/bundles/tomcat-7.0.40/endorsed -classpath /opt/liferay.git/bundles/tomcat-7.0.40/bin/bootstrap.jar:/opt/liferay.git/bundles/tomcat-7.0.40/bin/tomcat-juli.jar
11:39 < topolik:#liferay> so tomcat has tomcat-juli.jar on the classpath
11:39 < topolik:#liferay> to override it, you would have to put your jar before the tomcat-juli.jar in classpath, or use endorsed dir
11:42 < jardineworks:#liferay> topolik, I don't think I want to override it though. All I want is for the logging.properties file to be found so that my JARs in lib/ext have a valid configuration and produce output
11:43 < jardineworks:#liferay> right now I get a warning that there are no appenders configured.
11:44 < topolik:#liferay> aah, got it
11:44 < topolik:#liferay> I know about this kind of problems
11:44 < topolik:#liferay> but didn't look at them closely
11:45 < topolik:#liferay> what I think (didn't test/try) is that portal re-configure the logging on startup
11:46 < topolik:#liferay> somehow globally, for all apps
11:46 < topolik:#liferay> and once you include liferay logging jars, you can use liferay logging and everything works OOTB
11:47 < topolik:#liferay> so, it takes some action to break this default logging configuration
11:47 < topolik:#liferay> but I don't know what are the actions
11:48 < topolik:#liferay> I should try to look at it to understand
12:21 < jardineworks:#liferay> topolik, when you say using the portal logging... do you mean that in my classes I use the LogFactoryUtil?
12:21 < topolik:#liferay> no
12:21 < topolik:#liferay> I mean that portal is prepared when you'd use it
12:22 < topolik:#liferay> but it's not so well prepared when you don't want to use it - use your own one and make it global
12:23 < jardineworks:#liferay> so let's say I have a class Foo in my Framework.jar. Framework.jar is deployed to lib/ext. Class Foo declares a logger. Should I use Log4j?
12:23 < jardineworks:#liferay> to be honest I don't care about my own versus the portal versus another.. as long as I see my statements :)
12:23 < topolik:#liferay> when you have your Framework.jar in lib/ext, whatever you use must be in that classloader (or parent one)
12:24 < topolik:#liferay> => there is only common logging (and perhaps the JULI)
12:24 < jardineworks:#liferay> the portal class loader you mean right?
12:24 < topolik:#liferay> nope, lib/ext has own classloader
12:24 < topolik:#liferay> and each application has new one
12:25 < topolik:#liferay> if you want to use custom logging framework from your Framework.jar, then the custom logging framework must be visible to that classloader
12:26 < topolik:#liferay> the problem is - when you put that Framework.jar on top of the classloader hierarchy, every custom logging framework that you are going to use must sit there too
12:26 < jardineworks:#liferay> ok -- so if there is a classloader for lib/ext jars, then where does it look for the properties file? in lib/ext as well?
12:27 < topolik:#liferay> look at catalina.properties
12:27 < topolik:#liferay> common.loader=${catalina.base}/lib,${catalina.base}/lib/*.jar,${catalina.home}/lib,${catalina.home}/lib/*.jar,${catalina.home}/lib/ext,${catalina.home}/lib/ext/*.jar
12:27 < topolik:#liferay> so basically it reads from these locations
12:28 < jardineworks:#liferay> topolik, so if I put a logging.properties file inside lib/ext, then it should work right?
12:28 < jardineworks:#liferay> since it would be on the classpath and thus loaded by the same classloader.
12:28 < topolik:#liferay> right, with one exception
12:28 < jardineworks:#liferay> I feel like I tried this already without success.
12:29 < topolik:#liferay> if any of the jars ${catalina.base}/lib,${catalina.base}/lib/*.jar,${catalina.home}/lib,${catalina.home}/lib/*.jar already contains the file, it will be loaded from there first
12:29 < jardineworks:#liferay> ok --- SO!
12:29 < jardineworks:#liferay> if I understand...
12:29 < jardineworks:#liferay> I should be able to BUNDLE a logging.properties with my jar right?
12:30 < jardineworks:#liferay> i DEFINITELY tried that using log4j but it did not work. I don't think I have tried it with JULI yet though
12:31 < topolik:#liferay> I'm afraid that your logging.properties won't be loaded from your JAR
12:31 < topolik:#liferay> because there may be only one logging.properties for JVM
12:31 < jardineworks:#liferay> :S
12:31 < topolik:#liferay> unless you reconfigure java logging with your file, it will use tomcat's one
12:31 < jardineworks:#liferay> so I should switch it back to Log4j?
12:31 < topolik:#liferay> which is higher in hierarchy
12:31 < jardineworks:#liferay> wait
12:32 < jardineworks:#liferay> if that is true, then why is it not shoiwng already!
12:32 < topolik:#liferay> what logging do you use, java logging?
12:33 < jardineworks:#liferay> i have a better question... which one SHOULD I use to solve this. I'll make the change now quickly and try anything you suggest lol
12:33 < topolik:#liferay> hehe
12:33 < topolik:#liferay> I'm not sure and don't want to blame you
12:33 < topolik:#liferay> I'd use java logging there
12:33 < topolik:#liferay> if you use Log4j, you need to include those JARs together with yours
12:33 < jardineworks:#liferay> java logging as in JULI?
12:34 < topolik:#liferay> http://docs.oracle.com/javase/7/docs/api/java/util/logging/Logger.html#getLogger(java.lang.String)
12:35 < jardineworks:#liferay> ok -- perfect that is what I am doing
12:35 < jardineworks:#liferay> but I get no output.
12:36 < jardineworks:#liferay> So .. full circle... where do I put the *(&$%#@!ing logging.properties file so that my jars in that folder will output the level I set
12:37 < jardineworks:#liferay> of all the mayhem I have to do on this project, its very disconcerting that this seems to be the most complicated :)
12:38 < topolik:#liferay> you need to configure it in tomcat/conf/logging.properties
12:39 < jardineworks:#liferay> ok lemme see
12:39 < jardineworks:#liferay> ok -- there is a file there.
12:40 < jardineworks:#liferay> INFO and FINE appears to be the levels for the appenders. This is whatever comes in the Liferay 6.1 bundle because I haven't changed it
12:41 < jardineworks:#liferay> so I use levels as low as FINE and as high as SEVERE. Nothing shows in my tail of catalina.out
12:41 < jardineworks:#liferay> and I would assume that this would be the one I need to look at org.apache.catalina.core.ContainerBase.[Catalina].[localhost].level = INFO
12:41 < jardineworks:#liferay> org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers = 2localhost.org.apache.juli.FileHandler
12:42 < jardineworks:#liferay> since the ROOT.xml is configured under Catalina/localhost
12:55 < topolik:#liferay> hmm, let me see
13:15 < jardineworks:#liferay> topolik, is it possible that the portal has overriden JULI and is using log4j? because I see this in my console..
13:15 < jardineworks:#liferay> log4j:WARN No appenders could be found for logger (org.apache.http.impl.conn.BasicClientConnectionManager).
13:15 < jardineworks:#liferay> log4j:WARN Please initialize the log4j system properly.
13:15 < jardineworks:#liferay> log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
14:06 < jardineworks:#liferay> topolik, did I lose you? time difference kick in yet? :)
14:55 < topolik:#liferay> jardineworks: I'm sorry, I regularly have irregular pauses :)
14:56 < topolik:#liferay> hmm, I see, but the problem you see is generated by log4j
14:56 < topolik:#liferay> there is common problem with portal + global log4j
14:59 < topolik:#liferay> portal reconfigures log4j from portal-log4j.xml. If you use log4j in your project and move log4j libraries into the common classloader, portal will update the global one
14:59 < topolik:#liferay> but it's a mystery for me why standard Java logging doesn't work as expected
15:07 < jardineworks:#liferay> ah ok -- I put the log4j in /lib/ext a while ago to try to solve this problem.. I can remove it since it did not help.
15:08 < jardineworks:#liferay> topolik, but like you said... I can't understand why my logging is not showing. I wonder if rotty3000 might know?
16:50 < kgolebiowski:#liferay> hello
16:51 < kgolebiowski:#liferay> does anybody know what is the status of maven archetypes in 6.2 B3?
16:52 < adaro:#liferay> jardineworks: check <liferay_home>/tomcat-x.x.x/webapps/your-portlet/WEB-INF/classes/logging.properties you will probably find that the threshold is set to info
16:52 < kgolebiowski:#liferay> I cannot build clean portlet after creating it with maven
16:54 < jardineworks:#liferay> adaro, sure -- but I have INFO statements that are not showing :)
16:54 < kgolebiowski:#liferay> Don't know even if I should report it as jira issue
16:54 < adaro:#liferay> it's a threshold, fine is more fine grained than info
16:54 < adaro:#liferay> error is less fine grained
16:54 < adaro:#liferay> so error is displayed, fine is not
16:55 < adaro:#liferay> Liferay's deployer copies a logging.properties file to WEB-INF/classes if auto.deploy.copy.commons.logging is set
16:57 < jardineworks:#liferay> adaro, this is what is set in ROOT/WEB-INF/classes/logging.properties -- org.apache.catalina.core.ContainerBase.[Catalina].handlers=java.util.logging.ConsoleHandler
16:57 < jardineworks:#liferay> org.apache.catalina.core.ContainerBase.[Catalina].level=INFO
16:57 < jardineworks:#liferay> so INFO, WARNING and SEVERE should be showing right?
16:59 < adaro:#liferay> yes,and debug and trace shouldn't be
16:59 < adaro:#liferay> i think. I never use java.util.logging to be honest
17:12 < jardineworks:#liferay> adaro, still not working then... because INFO, WARNING and SEVERE are not showing.
17:13 < jardineworks:#liferay> i switche dto JULI thinking that it would fix the issue... I wasn't having them show with Log4j either.
17:30 < adaro:#liferay> jardineworks: it works fine for me if i include a logging.properties file  the WEB-INF/classes folder of a plugin war that looks somewhat like this : https://gist.github.com/jelmerk/1a50638ba901a5885dd3
17:31 < adaro:#liferay> it seems that by default it does nothing
17:31 < adaro:#liferay> because this org.apache.catalina.core.ContainerBase.[Catalina] business only matches for tomcat classes
21:33 -!- mode/#liferay [+o jhf] by ChanServ
21:40 < jardineworks:#liferay> adaro, are you still around?
--- Log closed Tue Sep 17 00:00:24 2013
