--- Log opened Mon Jan 13 00:00:34 2014
02:55 < avinashrbhat:#liferay> has anyone successfully merged navbar with dockbar (or, vice-versa)?
04:17 < Tar-Minyatur:#liferay> Good morning.
04:17 < Tar-Minyatur:#liferay> Wow...macro names in velocity templates have to be unique?
04:52 < avinashrbhat:#liferay> hmm, odd, I just found about this macros :-)
04:55 < avinashrbhat:#liferay> Tar-Minyatur, do you know how to include a macro into the portlet theme?
04:55 < Tar-Minyatur:#liferay> A macro is nothing but a subroutine inside a velocity template.
04:55 < Tar-Minyatur:#liferay> You can define them in there and use them.
04:56 < Tar-Minyatur:#liferay> It's something that only happens in the template. The portlet doesn't even know about it.
04:56 < Tar-Minyatur:#liferay> (If your portlet even uses velocity templates.)
04:56 < avinashrbhat:#liferay> ok, I was looking a way to combine the docbar and nav bar
04:57 < avinashrbhat:#liferay> Tar-Minyatur, actually I was creating a theme. ;-)
04:57 < Tar-Minyatur:#liferay> So theme, not portlet.
04:57 < avinashrbhat:#liferay> yup
04:57 < avinashrbhat:#liferay> bootstrap one
04:57 < Tar-Minyatur:#liferay> You can use macros in the velocity templates of your theme as well.
04:57 < Tar-Minyatur:#liferay> I'm not too sure about the details, though.
04:57 < avinashrbhat:#liferay> hmm, thx
04:57 < Tar-Minyatur:#liferay> Never built a theme myself...had to work with the crappy one we've got.
04:58 < avinashrbhat:#liferay> LOL
04:58 < avinashrbhat:#liferay> I am the designer, developer and sadly the admin here. so no way out of that :-D
04:58 < Tar-Minyatur:#liferay> I wish I were!
04:59 < Tar-Minyatur:#liferay> I inherited a totally f***** up Liferay setup.
04:59 < avinashrbhat:#liferay> LOL, for me it's an experimentation, just looking how it will go.
04:59 < Tar-Minyatur:#liferay> Theme not built correctly, core modified to no end and everything is just used in the wrong way.
04:59 < Tar-Minyatur:#liferay> Lucky you.
05:00 < avinashrbhat:#liferay> I had a similar project before, (not liferay though), had to rebuild from scratch.
05:01 < avinashrbhat:#liferay> man, the GUI was so ugly and complicated, that if you click on any of the links while the page loaded, the session goes out of the window.
10:02 < jardineworks:#liferay> hey rotty3000 -- can I ask yo ua design question around some search requirements I have?
10:02 <@rotty3000:#liferay> shoot
10:02 < jardineworks:#liferay> cool
10:04 < jardineworks:#liferay> rotty3000, So my project needs a form of federated search. I know that portlet #3 can support this using OpenSearch -- but I have never done it before. Web Content comes out of LR but there are several entities (which could probably be in Liferay but are not) that I have to call a REST service to search. The REST services suck donkey balls. The best I can hope for is a JSON response. I have basically 3 days to do this. The options I see a
10:04 < jardineworks:#liferay> re...
10:05 < jardineworks:#liferay> 1. User #3 and plug in open search interfaces for flyers, recipes (when the impl classes call the services)
10:05 < jardineworks:#liferay> 2. Create a custom portlet that uses the Search APIs and then merges those results with service call results.
10:05 < jardineworks:#liferay> .. and I feel like there was a third but I forgot it :)
10:06 < jardineworks:#liferay> rotty3000, I see your name all over the search code and forums .. so any advice you have would be great
10:08 <@rotty3000:#liferay> which portal version?
10:08 < jardineworks:#liferay> 6.1.2 GA3 CE
10:09 < jardineworks:#liferay> Tomcat 7 / Lucene (OOTB) / MySQL
10:09 < jardineworks:#liferay> actually, MariaDB
10:10 <@rotty3000:#liferay> ok so there is a feature to register N search engines conforming to the SearchEngine API
10:11 <@rotty3000:#liferay> the API also allows your queries to be sent to any of the registered engines
10:11 < jardineworks:#liferay> and is that just a case of implementing an interface and then providing my custom logic?
10:11 <@rotty3000:#liferay> and the engines can be multiple solr/lucene/other as long as the intration all conform to the API
10:11 <@rotty3000:#liferay> exactly
10:11 <@rotty3000:#liferay> now
10:12 <@rotty3000:#liferay> there is a gotcha from the UI
10:12 <@rotty3000:#liferay> there is no current UI that provides a means to say "get me results from all engines"
10:12 < jardineworks:#liferay> 3 days -- which is probably more like 1.5 days because other stuff keeps coming up.
10:12 <@rotty3000:#liferay> it effectively only searches the default "SYSTEM_ENGINE"
10:12 <@rotty3000:#liferay> however
10:13 <@rotty3000:#liferay> yeah, so this is not something I would say is a 3 day affair
10:13 <@rotty3000:#liferay> unless they accept raw search results from remote system in an iframe
10:14 <@rotty3000:#liferay> I mean.. I can't even write my name in 3 days
10:14 < jardineworks:#liferay> 3 days doesn't seem like a lot of time for any of this.
10:14 < jardineworks:#liferay> lol
10:14 < jardineworks:#liferay> well, in all fairness, my days for the last 8 weeks have been 12 - 15 hours
10:14 < jardineworks:#liferay> so 3 days is probably 5 :)
10:14 <@rotty3000:#liferay> qa should take 3 days maybe
10:14 < jardineworks:#liferay> if that helps
10:14 < jardineworks:#liferay> qa?
10:14 < jardineworks:#liferay> I am working for an agency man
10:14 < jardineworks:#liferay> they let the end users do the qa
10:15 <@rotty3000:#liferay> ehhg...
10:15 < jardineworks:#liferay> (I can hear you screaming)
10:15 < jardineworks:#liferay> :)
10:16 < Tar-Minyatur:#liferay> *lol* You get used to it.
10:16 <@rotty3000:#liferay> so the downside is that we don't have a nice story for the "multi-search" use case right now so I can't even point you at a white paper or dev docs
10:16 < Tar-Minyatur:#liferay> Either you do your QA yourself (in your free time) or you hand over possibly broken stuff.
10:16 < jardineworks:#liferay> starting to feel like a custom search portlet :)
10:17 <@rotty3000:#liferay> the best I can do is tell you that there IS support for multiple engines, you don't need to change the query logic at all.. you only need to supply the registered ID of the new engine
10:17 < jardineworks:#liferay> Tar-Minyatur, I have been developing at break neck speed and I told them that a lot of the stuff would be minimally tested because I have to move on to the next. They complain when I take longer to deliver (because I am testing it) ... they complain when they find bugs. I work more hours, they complain about what they are paying me. Some people on this planet, you just cant please.
10:18 <@rotty3000:#liferay> then you could actually iterate through all the engines. and then merge the results
10:18 < Tar-Minyatur:#liferay> jardineworks: Yes...definitely. The developers are always expected to achieve miracles on a daily basis.
10:18 < jardineworks:#liferay> rotty3000, so basically, my SearchEngineUtil class I would tell is "use the recipe engine" ... oh .. shit with no docs that feels risky for me.
10:19 < jardineworks:#liferay> I mean, I would love to do it... feels right, but I don't think I have the time.
10:19 < Tar-Minyatur:#liferay> But I think the problem it that most of us like being the one who achieves miracles...and we make stuff work under the most impossible circumstances. People get used to that.
10:19 <@rotty3000:#liferay> otherwise, you're going to use you're own APIs, and build your own UI logic
10:19 <@rotty3000:#liferay> OR use OpenSearch
10:19 <@rotty3000:#liferay> which is not very nice either, but might be "closest" the end goal from what I'm hearing
10:20 < jardineworks:#liferay> rotty3000, OpenSearch I thought was the possible answer but I added <open-search-class/> to one of my portlets last night and added logging statement to the interface methods... no matter what I do, I never see them output. So I don't think it is working.
10:21 <@rotty3000:#liferay> check that the search portlet is actually calling open searches?
10:21 < jardineworks:#liferay> rotty3000, the search results, at least, are tabbed by "search engine" ...
10:21 <@rotty3000:#liferay> it's a configuration option
10:21 < jardineworks:#liferay> rotty3000, I added the tag, and in the search portlet I enabled OpenSearch.
10:21 <@rotty3000:#liferay> hmm..
10:22 < jardineworks:#liferay> rotty3000, no need to restart or anything right?
10:22 < jardineworks:#liferay> just redeploy the portlet?
10:22 <@rotty3000:#liferay> shouldn't need to,...
10:22 < jardineworks:#liferay> I assumed the hot deployment would see the config and register the class somewhere
10:23 <@rotty3000:#liferay> .. can't wait for proper lifecycle support for all hooks/extensions... so hard to debug simple things like if impls are initd or destroyed properlty
10:24 <@rotty3000:#liferay> so make a default constructor, and print a debug line there to make sure it's getting loaded
10:24 < jardineworks:#liferay> k
10:25 < jardineworks:#liferay> rotty3000, it is. during deployment I see 15:23:06,270 INFO  [localhost-startStop-35][FlyerOpenSearchImpl:31] *****FlyerOpenSearchImpl loaded.
10:26 < jardineworks:#liferay> ah
10:26 < jardineworks:#liferay> I was overriding the UserId serach method... I just added the GroupId method and see it now.
10:28 < jardineworks:#liferay> rotty3000, the other option I was wondering... possibly using a structs action override for the #3 portlet and then appending to it my logic to call the services ... returning 3 result sets. I could then forward to a custom JSP and just output my logic (in place of trying to provide a JSP override for the #3 view).
10:28 < jardineworks:#liferay> but I wasn't sure if that was a good idea.
10:28 <@rotty3000:#liferay> sure thing, that would work
10:29 <@rotty3000:#liferay> can't wait for you guys to see how simple this type of override will be in 7.0
10:30 < jardineworks:#liferay> rotty3000, tease.
10:31 <@rotty3000:#liferay> I'm not teasing.. I'm trying to save you all immense pain and I want to make sure you know I feel your pain
10:31 < Tar-Minyatur:#liferay> Can we please have a "solve all my problems" button in the next release?
10:32 < jardineworks:#liferay> lol
10:32 <@rotty3000:#liferay> :)
10:32 < jardineworks:#liferay> umm... please don't include that. That would put me out of business.
10:33 < jardineworks:#liferay> rotty3000, so the response from an open search has to be XML?
10:33 < Tar-Minyatur:#liferay> jardineworks: You don't have to tell your customer that you actually only hit one button. Oo
10:33 < jardineworks:#liferay> Tar-Minyatur, I'd have to raise my rate.
10:33 < jardineworks:#liferay> :)
10:34 < Tar-Minyatur:#liferay> You would go through so much work!
10:36 <@rotty3000:#liferay> jardineworks: yeah, it expects XML output :(
10:36 <@rotty3000:#liferay> you can look at the portal examples to see how we do it
10:37 < rfonseca:#liferay> topolik: hmm, I'll take a look into it, thanks.
10:42 <@rotty3000:#liferay> jardineworks: https://github.com/rotty3000/liferay-portal/blob/master/portal-service/src/com/liferay/portal/kernel/search/HitsOpenSearchImpl.java
10:42 <@rotty3000:#liferay> basically, your results can come back in any form, as long as what the opensearch returns to the caller is XML string
10:43 <@rotty3000:#liferay> as you can see from the class I posted, the results are our search Documents, which we read and convert into an XML
10:45 <@rotty3000:#liferay> you probably want to extend at least BaseOpenSearchImpl
10:48 < jardineworks:#liferay> rotty3000, right now I am extending HitsOpenSearchImpl
10:48 < jardineworks:#liferay> which is extending base
10:48 <@rotty3000:#liferay> k
10:49 < jardineworks:#liferay> so based on what I am looking at... I have no indexer so i would skip all that. I basically call the service with the query. I can request that the server respond to me in XML .. but I highly doubt it is ATOM compliant.
10:53 < jardineworks:#liferay> rotty3000, I see... the open_search.jspf loops over the portlet checking for OpenSearch definitions and if it finds one, then it executes. So for my external services, I would need to JSP override this file to provide my custom look and feel.
10:53 <@rotty3000:#liferay> yup
10:54 < jardineworks:#liferay> rotty3000, Ah! but ... here is the line I like to see. -- tring xml = openSearch.search(request, groupId, themeDisplay.getUserId(), keywords, openSearchSearchContainer.getCur(), openSearchSearchContainer.getDelta(), format);
10:54 < jardineworks:#liferay> that's just a string right? so I could return the JSON and deserialize it rather than XML
10:54 < jardineworks:#liferay> because chances are I am not going to be using a search container.
11:10 <@rotty3000:#liferay> yup
11:20 < jardineworks:#liferay> rotty3000, ok thanks for the hints. I'm gonna do a poc and see what I can come up with.
11:20 < jardineworks:#liferay> rotty3000, I reserve the right to harass you further :)
11:20 <@rotty3000:#liferay> good luck!
11:21 < jardineworks:#liferay> thanks -- though sadly to date I have to say stress, sweat and blood has been the only route to success on this one.
11:22 <@rotty3000:#liferay> "one percent inspiration, ninety nine percent perspiration" - Thomas Edison
11:27 < jardineworks:#liferay> damn. I think I need to reprint my business cards! :)
11:37 < Tar-Minyatur:#liferay> Does one of you by any chance know how the theme is stored in the layouts table?
11:37 < Tar-Minyatur:#liferay> There is this column themeId.
11:38 < Tar-Minyatur:#liferay> My problem now is that for some stupid reason nobody ever switched the theme for the public pages but rather set the theme on every single page.
11:38 < Tar-Minyatur:#liferay> I want to change that make all pages use the default instead.
11:39 < Tar-Minyatur:#liferay> Looks like I have to set the themeId to "" for all pages, but I'm not sure.
12:03 < jardineworks:#liferay> Tar-Minyatur, That sounds right to me. In the past I have had to remove an old theme reference from a page and I just went into that table and deleted the column value.
12:10 < Tar-Minyatur:#liferay> Yeah. Sure looks like that's correct. At least that seems to be what Liferay is doing when I change a page back to "use look and feel of public pages".
13:22 < jardineworks:#liferay> rotty3000, I am embedding the search portlet in my theme. is it possible to pass configruation options into it? I know I can disable the Impl classes in the portal ext but I also want to remove one of the facets and enable the OpenSearch
13:23 <@rotty3000:#liferay> how are you embedding?
13:23 < jardineworks:#liferay> $theme.search()
13:25 <@rotty3000:#liferay> ok, so this is wonky..
13:26 <@rotty3000:#liferay> the only way to configure the search portlet in that scenario is to add the portlet to the page, configure it, remove it from the page...
13:26 < jardineworks:#liferay> lol
13:26 < jardineworks:#liferay> so I am on my home pge.
13:26 <@rotty3000:#liferay> since the preferences are scoped to the site, the one embedded in the theme should retain the settings
13:26 < jardineworks:#liferay> and it's embedded.
13:26 < jardineworks:#liferay> so add it as another another instance? configured it? and delete it?
13:27 <@rotty3000:#liferay> yeah ;|
13:27 < jardineworks:#liferay> haha
13:27 < jardineworks:#liferay> awesome
13:28 < jardineworks:#liferay> that didn't work.
13:28 <@rotty3000:#liferay> hrrmph..
13:28 < jardineworks:#liferay> I still see the wrong display
13:29 <@rotty3000:#liferay> you mean after you search?
13:29 < jardineworks:#liferay> yeah
13:29 <@rotty3000:#liferay> is it redirecting somewhere?
13:29 < jardineworks:#liferay> don't think so... lemme double check
13:31 < jardineworks:#liferay> no sir... in context.
13:31 <@rotty3000:#liferay> ok then don't use that embedding method
13:31 <@rotty3000:#liferay> use this one:
13:32 <@rotty3000:#liferay> $theme.runtime("portletID", "", "default preferences")
13:32 < jardineworks:#liferay> oh .. maybe I got it
13:33 <@rotty3000:#liferay> oh ok
13:33 < jardineworks:#liferay> ah no
13:33 < jardineworks:#liferay> you have to set it that way per page it seems
13:33 < jardineworks:#liferay> werid
13:33 <@rotty3000:#liferay> and the one I gave will also give you problems
13:34 <@rotty3000:#liferay> right, prefers are scoped per page?
13:34 < jardineworks:#liferay> yes?
13:34 < jardineworks:#liferay> :)
13:34 < jardineworks:#liferay> can I change that (for just this portlet)?
13:34 <@rotty3000:#liferay> the scope?
13:35 <@rotty3000:#liferay> yeah, but only with mod to an XML in the core
13:35 < jardineworks:#liferay> ugh
13:35 < jardineworks:#liferay> rather not if there is an alternative.
13:35 < jardineworks:#liferay> would the preferences string just be a JSON?
13:36 <@rotty3000:#liferay> wait...
13:36 <@rotty3000:#liferay> sec
13:37 <@rotty3000:#liferay> so, the default facets can be overridden by placing a file in ROOT/WEB-INF/classes
13:37 <@rotty3000:#liferay> com/liferay/portlet/search/dependencies/facet_configuration.json
13:38 < jardineworks:#liferay> oh
13:38 <@rotty3000:#liferay> default is here https://github.com/rotty3000/liferay-portal/blob/master/portal-impl/src/com/liferay/portlet/search/dependencies/facet_configuration.json
13:38 < jardineworks:#liferay> cool -- I'll check that out. Thanks again rotty3000
13:38 <@rotty3000:#liferay> n/p
13:40 < jardineworks:#liferay> that won't enable the perferences for OpenSearch though ...
13:56 <@rotty3000:#liferay> jardineworks: true!
13:57 <@rotty3000:#liferay> the only othere way is to actually set the preferences in velocity code... doable, but blehck...
13:57 <@rotty3000:#liferay> I think I have an example of that in gist form
13:57 < jardineworks:#liferay> that would be awesome
13:58 < jardineworks:#liferay> I think I might have to go that route... I just dropped the facet configuration into that location but for the moment anyway, all the facets are showing.
13:58 < jardineworks:#liferay> not a big deal with the facets, I can remove them from my new template anyway...
13:59 < jardineworks:#liferay> but the open search is kinda important :)
13:59 <@rotty3000:#liferay> https://gist.github.com/rotty3000/4287391
14:01 < jardineworks:#liferay> "displayOpenSearchResultsCheckbox", "true" ?
