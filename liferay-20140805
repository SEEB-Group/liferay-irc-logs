--- Log opened Tue Aug 05 00:00:44 2014
10:11 < Yam`:#liferay> hi
10:14 < bijoo_:#liferay> Yam`: hello; how's it going here for you?
10:17 < Yam`:#liferay> bijoo_, i'm trying to do things with MVCPortlet but I'm a beginner and I don't find example of what I wanna do
10:17 < jardineworks:#liferay> Yam`, what are you trying to do?
10:18 < Yam`:#liferay> I have an organization let's say IBM
10:19 < Yam`:#liferay> with two sub organizations: Calyon and Amundi
10:19 < Yam`:#liferay> I want to test if I can do a portlet that displays the users in the same organization of the viewer
10:20 < Yam`:#liferay> ex: if johndoe in Calyon opens the page where there's the portlet, it displays the users of Calyon
10:21 < jardineworks:#liferay> Yam`, you shoul dbe able to do that with the OrganizationLocalServiceUtil.
10:22 < jardineworks:#liferay> Yam`, OrganizationLocalServiceUtil.getUserOrganizations( [userid], Boolean.TRUE ); might do it ...
10:23 < Yam`:#liferay> I'll try that jardineworks thanks :)
10:24 < jardineworks:#liferay> you can get the current users user id by using the PortalUtil.getUserId( renderRequest ); (assuming that you are doing this in the render method)
10:24 < jardineworks:#liferay> oh no wait
10:24 < jardineworks:#liferay> that will give you the list of organizations that user is in...
10:25 < jardineworks:#liferay> Yam`, UserLocalServiceUtil.getOrganizationUsers( organizationId );
10:25 < Yam`:#liferay> where do you see the methods?
10:26 < Yam`:#liferay> because if I learn how to do it I might have less problems :D
10:26 < jardineworks:#liferay> that will give you a List<User> that you can add to the renderRequest.setAttribute ... and then in the JSP you can use JSTL to <c:forEach /> over the users.
10:26 < jardineworks:#liferay> Yam`, Service Builder is bootstrapped by Liferay. They use it to generate their own entity models.
10:27 < jardineworks:#liferay> so learn service builder and  you will understand how to find the service classes that are used to access the liferay model objects.
10:27 < Yam`:#liferay> ok
10:27 < jardineworks:#liferay> Yam`, http://www.liferay.com/community/wiki/-/wiki/Main/Service+Builder
10:28 < jardineworks:#liferay> and the number one fail that I see Liferay developers NOT DOING... is including the Portal Source code as part of their development process. Liferay doesn't have to be a black box. YOu can see how it is done, so do it.
10:28 < jardineworks:#liferay> The best programmers aren't the ones that write code -- they're the ones that can READ code.
10:29 < jardineworks:#liferay> whenever I am tasked with hiring someone, I NEVER ask them to write code. I give them some code and tell them to read it and tell me what is happening.
10:30 < jardineworks:#liferay> Yam`, in eclipse, CTRL-SHIFT-R is your best friend :)
10:30 < Yam`:#liferay> I try to read the wiki but as I know nothing, I don't know what may be able to help me :/
10:31 < jardineworks:#liferay> Yam`, Trial and error and reading Liferays source man.
10:31 < Yam`:#liferay> what is liferay's source man ?
10:32 < jardineworks:#liferay> Yam`, the Liferay Portal source code. YOu can download the Liferay Tomcat Bundle, the Liferay SDK, ... the SQL Scripts... one of the options is "portal source". That is the java code that   is the entire portal.
10:32 < jardineworks:#liferay> so you can literally set a break point in the MainServlet (the main entry point for the application) and step through everything that happens.
10:33 < Yam`:#liferay> okay
10:35 < jardineworks:#liferay> Yam`, I guess the bottom line is... the best way to understand Liferay, at least I think, is to read the source.
10:41 < Yam`:#liferay> jardineworks, I've got that for the moment: http://pastebin.com/s20qVTy4 which I founded in a blog tutorial
10:42 < Yam`:#liferay> it generates a form with an input and a button and after clicking it, it displays the text that the user types in the input
10:43 < Yam`:#liferay> to do the thing I explained earlier, I should do the  PortalUtil.getUserId( renderRequest ); and the UserLocalServiceUtil.getOrganizationUsers( organizationId ); in the doView method?
10:47 < jardineworks:#liferay> Yam`, Are you using the MVCPortlet?
10:47 < Yam`:#liferay> jardineworks, my CustomMVCPortlet class extends MVCPortlet
10:47 < Yam`:#liferay> that's what the guy did in the tutorial, should I do otherwise?
10:48 < jardineworks:#liferay> Yam`, you can use doView, but personally, I always override the render( RenderRequest, RenderRenderResponse ) method.
10:48 < Yam`:#liferay> s/otherwise/differently/
10:48 < jardineworks:#liferay> you just need to make sure that the last line in the method is a super.render( request, response ) so that the MVCPortlet invokes the doView method.
10:49 < Yam`:#liferay> jardineworks, what's the difference to do with doView or render, that's because doView must only do the "rendering" and the actions must be done elsewhere?
10:51 < jardineworks:#liferay> well, if you look at the MVCPortlet class you can see that it calls the doView which does some of the basic required (boiler plate) code for implementing a doView. You don;t need to do that stuff because MVCPortlet is doing it for you right? so I just override the render method because its cleaner code (in my opinion) all I need to do is assemble what I need for the view. Sp in your case... I would have something like -- (one
10:51 < jardineworks:#liferay> sec).
10:57 < jardineworks:#liferay> Yam`, just writing and example.. gimme a minute
10:57 < Yam`:#liferay> jardineworks, thanks :)
11:15 < jardineworks:#liferay> Yam`, no error checking or anything... and there may be more efficient ways to do this (imagine 1000's of users, the private method would not be very efficient) but to give you and idea -- http://pastie.org/9447672
11:22 < Yam`:#liferay> jardineworks, thanks a lot, I'll see that !
11:24 < Yam`:#liferay> jardineworks, what is the log for?
11:25 < jardineworks:#liferay> Yam`, I refactored a method out of my example because I found a short cut in the OrganizationLocalServiceUtil class... but originally I was detecting "anonymous" users and logging the skip. I almost always include a logger in my classes so that I can have some trace.
11:27 < Yam`:#liferay> And in my case is it use or not?
11:30 < Yam`:#liferay> jardineworks, is is com.liferay.portal.kernel.log or another?
11:30 < jardineworks:#liferay> that's it
11:31 < Yam`:#liferay> ok :)
11:33 < Yam`:#liferay> jardineworks, eclipse says that I must surrond 		List<Organization> userOrganizations = OrganizationLocalServiceUtil.getUserOrganizations( userId ); with try/catch, does it say it for you too?
11:33 < jardineworks:#liferay> I wrote it in notepad... but yes, you should wrap that
11:34 < jardineworks:#liferay> the service could throw an exception so you gotta catch it and handle it
11:36 < Yam`:#liferay> and (sorry if it may be obvious) how should I handle it?
11:36 < jardineworks:#liferay> well, its in a loop right?
11:37 < jardineworks:#liferay> so I would log that an error occured, make sure you log the organization id and the root cause, and then move on to the next item in the loop
11:44 < Yam`:#liferay> ok :)
11:59 < Yam`:#liferay> jardineworks, and then what do I do in the view.jsp to display it? I tried <c:forEach var="entry" items="${requestScope['myCollection']}" >
11:59 < Yam`:#liferay> 	${entry}<br/>
11:59 < Yam`:#liferay> </c:forEach> but it doesn't do anything
12:17 < Yam`:#liferay> jardineworks, you there? :)
12:18 < jardineworks:#liferay> hey
12:18 < jardineworks:#liferay> this is a constant -- ATTRIBUTE_ORGANIZATION_USERS_MAP
12:18 < jardineworks:#liferay> which automatically adds the map to the pageContext
12:18 < jardineworks:#liferay> so you can access it as $organizationUsersMap
12:19 < jardineworks:#liferay> <c:forEach items="$organizationUsersMap" var="user"> ... </c:forEach> ...
12:19 < jardineworks:#liferay> what you will have to look up is how to iterate over a map
12:20 < jardineworks:#liferay> the keys are the organization id,  but that will give you access to ANOTHER list.
12:20 < jardineworks:#liferay> so, if you only care about a specific org...
12:20 < jardineworks:#liferay> you could use a scriplet to get the List<User> object and then just iterate over that.
12:28 < Yam`:#liferay> I've done that but it doesn't diplay anything :/
12:44 < Yam`:#liferay> jardineworks, I've got that: http://pastebin.com/907HRujC did I miss something?
13:25 < jardineworks:#liferay> Yam`, a map has key value pairs. the Value is the user.
13:26 < jardineworks:#liferay> for example...
13:26 < jardineworks:#liferay> <c:forEach var="entry" items="${myMap}">
13:26 < jardineworks:#liferay>   Key: <c:out value="${entry.key}"/>
13:26 < jardineworks:#liferay>   Value: <c:out value="${entry.value}"/>
13:26 < jardineworks:#liferay> </c:forEach>
13:27 < jardineworks:#liferay> so you would do ${ entry.value } but that gets you the user object. If you want the email say you would need to do $[entry.value.emailAddress} (since looking at the UserImpl class... there is a getEmailAddress() which is what JSTL would actually use)
13:28 < Yam`:#liferay> oh ok I'll try that
13:30 < Yam`:#liferay> mh I still haven't got anything jardineworks :/
13:31 < jardineworks:#liferay> Yam`, ok, maybe the map is empty. Try putting a test<br/> in the <c:forEach> loop and see if it shows. If it doesn't, then you have no items.
13:32 < jardineworks:#liferay> Yam`, are you logged into the portal?
13:32 < Yam`:#liferay> jardineworks, yes I am
13:32 < jardineworks:#liferay> k
13:32 < jardineworks:#liferay> try the test thing
13:32 < Yam`:#liferay> I see one test
13:32 < Yam`:#liferay> (one iteration)
13:33 < jardineworks:#liferay> are you using entry.value or user.value?
13:34 < Yam`:#liferay> entry.value
13:34 < Yam`:#liferay> oh non
13:34 < Yam`:#liferay> no*
13:34 < Yam`:#liferay> user.value
13:34 < Yam`:#liferay> var="user" and user.value
13:34 < jardineworks:#liferay> Yam`, but your var value is user. change the value of your var="user" to var="entry"
13:35 < Yam`:#liferay> no no I was already using user, my bad
13:35 < Yam`:#liferay> that's not the issue
13:35 < jardineworks:#liferay> can you show me the code?
13:36 < Yam`:#liferay> yes just a sec
13:38 < Yam``:#liferay> jardineworks, voilà : http://pastebin.com/3WNrbmsX
13:41 < jardineworks:#liferay> Yam``, try outputting based on what i said above...
13:41 < jardineworks:#liferay> <jardineworks> <c:forEach var="entry" items="${myMap}">
13:41 < jardineworks:#liferay> <jardineworks>   Key: <c:out value="${entry.key}"/>
13:41 < jardineworks:#liferay> <jardineworks>   Value: <c:out value="${entry.value}"/>
13:41 < jardineworks:#liferay> <jardineworks> </c:forEach>
13:41 < Yam``:#liferay> I copy the same thing jardineworks ?
13:42 < jardineworks:#liferay> except the myMap...
13:42 < Yam``:#liferay> yes
13:42 < jardineworks:#liferay> shpuld be
13:43 < jardineworks:#liferay> oh!
13:43 < jardineworks:#liferay> items="$organizationUsersMap"
13:43 < jardineworks:#liferay> should be items="${organizationUsersMap}"
13:43 < Yam``:#liferay> the brackets?
13:43 < Yam``:#liferay> ok... my bad :/
13:43 < jardineworks:#liferay> i think i have it to you like that
13:43 < jardineworks:#liferay> (without brackets) sorry :)
13:44 < Yam``:#liferay> nevermind, you help me a lot I don't mind you making mistakes :D
